// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-zero-shorterurl/admin/internal/dal/model"
)

func newTGroupUnique(db *gorm.DB, opts ...gen.DOOption) tGroupUnique {
	_tGroupUnique := tGroupUnique{}

	_tGroupUnique.tGroupUniqueDo.UseDB(db, opts...)
	_tGroupUnique.tGroupUniqueDo.UseModel(&model.TGroupUnique{})

	tableName := _tGroupUnique.tGroupUniqueDo.TableName()
	_tGroupUnique.ALL = field.NewAsterisk(tableName)
	_tGroupUnique.ID = field.NewInt64(tableName, "id")
	_tGroupUnique.Gid = field.NewString(tableName, "gid")

	_tGroupUnique.fillFieldMap()

	return _tGroupUnique
}

type tGroupUnique struct {
	tGroupUniqueDo

	ALL field.Asterisk
	ID  field.Int64  // ID
	Gid field.String // 分组标识

	fieldMap map[string]field.Expr
}

func (t tGroupUnique) Table(newTableName string) *tGroupUnique {
	t.tGroupUniqueDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tGroupUnique) As(alias string) *tGroupUnique {
	t.tGroupUniqueDo.DO = *(t.tGroupUniqueDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tGroupUnique) updateTableName(table string) *tGroupUnique {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.Gid = field.NewString(table, "gid")

	t.fillFieldMap()

	return t
}

func (t *tGroupUnique) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tGroupUnique) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 2)
	t.fieldMap["id"] = t.ID
	t.fieldMap["gid"] = t.Gid
}

func (t tGroupUnique) clone(db *gorm.DB) tGroupUnique {
	t.tGroupUniqueDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tGroupUnique) replaceDB(db *gorm.DB) tGroupUnique {
	t.tGroupUniqueDo.ReplaceDB(db)
	return t
}

type tGroupUniqueDo struct{ gen.DO }

type ITGroupUniqueDo interface {
	gen.SubQuery
	Debug() ITGroupUniqueDo
	WithContext(ctx context.Context) ITGroupUniqueDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITGroupUniqueDo
	WriteDB() ITGroupUniqueDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITGroupUniqueDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITGroupUniqueDo
	Not(conds ...gen.Condition) ITGroupUniqueDo
	Or(conds ...gen.Condition) ITGroupUniqueDo
	Select(conds ...field.Expr) ITGroupUniqueDo
	Where(conds ...gen.Condition) ITGroupUniqueDo
	Order(conds ...field.Expr) ITGroupUniqueDo
	Distinct(cols ...field.Expr) ITGroupUniqueDo
	Omit(cols ...field.Expr) ITGroupUniqueDo
	Join(table schema.Tabler, on ...field.Expr) ITGroupUniqueDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITGroupUniqueDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITGroupUniqueDo
	Group(cols ...field.Expr) ITGroupUniqueDo
	Having(conds ...gen.Condition) ITGroupUniqueDo
	Limit(limit int) ITGroupUniqueDo
	Offset(offset int) ITGroupUniqueDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITGroupUniqueDo
	Unscoped() ITGroupUniqueDo
	Create(values ...*model.TGroupUnique) error
	CreateInBatches(values []*model.TGroupUnique, batchSize int) error
	Save(values ...*model.TGroupUnique) error
	First() (*model.TGroupUnique, error)
	Take() (*model.TGroupUnique, error)
	Last() (*model.TGroupUnique, error)
	Find() ([]*model.TGroupUnique, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TGroupUnique, err error)
	FindInBatches(result *[]*model.TGroupUnique, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TGroupUnique) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITGroupUniqueDo
	Assign(attrs ...field.AssignExpr) ITGroupUniqueDo
	Joins(fields ...field.RelationField) ITGroupUniqueDo
	Preload(fields ...field.RelationField) ITGroupUniqueDo
	FirstOrInit() (*model.TGroupUnique, error)
	FirstOrCreate() (*model.TGroupUnique, error)
	FindByPage(offset int, limit int) (result []*model.TGroupUnique, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITGroupUniqueDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tGroupUniqueDo) Debug() ITGroupUniqueDo {
	return t.withDO(t.DO.Debug())
}

func (t tGroupUniqueDo) WithContext(ctx context.Context) ITGroupUniqueDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tGroupUniqueDo) ReadDB() ITGroupUniqueDo {
	return t.Clauses(dbresolver.Read)
}

func (t tGroupUniqueDo) WriteDB() ITGroupUniqueDo {
	return t.Clauses(dbresolver.Write)
}

func (t tGroupUniqueDo) Session(config *gorm.Session) ITGroupUniqueDo {
	return t.withDO(t.DO.Session(config))
}

func (t tGroupUniqueDo) Clauses(conds ...clause.Expression) ITGroupUniqueDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tGroupUniqueDo) Returning(value interface{}, columns ...string) ITGroupUniqueDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tGroupUniqueDo) Not(conds ...gen.Condition) ITGroupUniqueDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tGroupUniqueDo) Or(conds ...gen.Condition) ITGroupUniqueDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tGroupUniqueDo) Select(conds ...field.Expr) ITGroupUniqueDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tGroupUniqueDo) Where(conds ...gen.Condition) ITGroupUniqueDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tGroupUniqueDo) Order(conds ...field.Expr) ITGroupUniqueDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tGroupUniqueDo) Distinct(cols ...field.Expr) ITGroupUniqueDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tGroupUniqueDo) Omit(cols ...field.Expr) ITGroupUniqueDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tGroupUniqueDo) Join(table schema.Tabler, on ...field.Expr) ITGroupUniqueDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tGroupUniqueDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITGroupUniqueDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tGroupUniqueDo) RightJoin(table schema.Tabler, on ...field.Expr) ITGroupUniqueDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tGroupUniqueDo) Group(cols ...field.Expr) ITGroupUniqueDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tGroupUniqueDo) Having(conds ...gen.Condition) ITGroupUniqueDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tGroupUniqueDo) Limit(limit int) ITGroupUniqueDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tGroupUniqueDo) Offset(offset int) ITGroupUniqueDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tGroupUniqueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITGroupUniqueDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tGroupUniqueDo) Unscoped() ITGroupUniqueDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tGroupUniqueDo) Create(values ...*model.TGroupUnique) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tGroupUniqueDo) CreateInBatches(values []*model.TGroupUnique, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tGroupUniqueDo) Save(values ...*model.TGroupUnique) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tGroupUniqueDo) First() (*model.TGroupUnique, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGroupUnique), nil
	}
}

func (t tGroupUniqueDo) Take() (*model.TGroupUnique, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGroupUnique), nil
	}
}

func (t tGroupUniqueDo) Last() (*model.TGroupUnique, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGroupUnique), nil
	}
}

func (t tGroupUniqueDo) Find() ([]*model.TGroupUnique, error) {
	result, err := t.DO.Find()
	return result.([]*model.TGroupUnique), err
}

func (t tGroupUniqueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TGroupUnique, err error) {
	buf := make([]*model.TGroupUnique, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tGroupUniqueDo) FindInBatches(result *[]*model.TGroupUnique, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tGroupUniqueDo) Attrs(attrs ...field.AssignExpr) ITGroupUniqueDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tGroupUniqueDo) Assign(attrs ...field.AssignExpr) ITGroupUniqueDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tGroupUniqueDo) Joins(fields ...field.RelationField) ITGroupUniqueDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tGroupUniqueDo) Preload(fields ...field.RelationField) ITGroupUniqueDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tGroupUniqueDo) FirstOrInit() (*model.TGroupUnique, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGroupUnique), nil
	}
}

func (t tGroupUniqueDo) FirstOrCreate() (*model.TGroupUnique, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGroupUnique), nil
	}
}

func (t tGroupUniqueDo) FindByPage(offset int, limit int) (result []*model.TGroupUnique, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tGroupUniqueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tGroupUniqueDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tGroupUniqueDo) Delete(models ...*model.TGroupUnique) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tGroupUniqueDo) withDO(do gen.Dao) *tGroupUniqueDo {
	t.DO = *do.(*gen.DO)
	return t
}
