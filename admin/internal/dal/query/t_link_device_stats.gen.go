// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"shorterurl/admin/internal/dal/model"
)

func newTLinkDeviceStat(db *gorm.DB, opts ...gen.DOOption) tLinkDeviceStat {
	_tLinkDeviceStat := tLinkDeviceStat{}

	_tLinkDeviceStat.tLinkDeviceStatDo.UseDB(db, opts...)
	_tLinkDeviceStat.tLinkDeviceStatDo.UseModel(&model.TLinkDeviceStat{})

	tableName := _tLinkDeviceStat.tLinkDeviceStatDo.TableName()
	_tLinkDeviceStat.ALL = field.NewAsterisk(tableName)
	_tLinkDeviceStat.ID = field.NewInt64(tableName, "id")
	_tLinkDeviceStat.FullShortURL = field.NewString(tableName, "full_short_url")
	_tLinkDeviceStat.Date = field.NewTime(tableName, "date")
	_tLinkDeviceStat.Cnt = field.NewInt32(tableName, "cnt")
	_tLinkDeviceStat.Device = field.NewString(tableName, "device")
	_tLinkDeviceStat.CreateTime = field.NewTime(tableName, "create_time")
	_tLinkDeviceStat.UpdateTime = field.NewTime(tableName, "update_time")
	_tLinkDeviceStat.DelFlag = field.NewBool(tableName, "del_flag")

	_tLinkDeviceStat.fillFieldMap()

	return _tLinkDeviceStat
}

type tLinkDeviceStat struct {
	tLinkDeviceStatDo

	ALL          field.Asterisk
	ID           field.Int64  // ID
	FullShortURL field.String // 完整短链接
	Date         field.Time   // 日期
	Cnt          field.Int32  // 访问量
	Device       field.String // 访问设备
	CreateTime   field.Time   // 创建时间
	UpdateTime   field.Time   // 修改时间
	DelFlag      field.Bool   // 删除标识 0：未删除 1：已删除

	fieldMap map[string]field.Expr
}

func (t tLinkDeviceStat) Table(newTableName string) *tLinkDeviceStat {
	t.tLinkDeviceStatDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tLinkDeviceStat) As(alias string) *tLinkDeviceStat {
	t.tLinkDeviceStatDo.DO = *(t.tLinkDeviceStatDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tLinkDeviceStat) updateTableName(table string) *tLinkDeviceStat {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.FullShortURL = field.NewString(table, "full_short_url")
	t.Date = field.NewTime(table, "date")
	t.Cnt = field.NewInt32(table, "cnt")
	t.Device = field.NewString(table, "device")
	t.CreateTime = field.NewTime(table, "create_time")
	t.UpdateTime = field.NewTime(table, "update_time")
	t.DelFlag = field.NewBool(table, "del_flag")

	t.fillFieldMap()

	return t
}

func (t *tLinkDeviceStat) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tLinkDeviceStat) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.ID
	t.fieldMap["full_short_url"] = t.FullShortURL
	t.fieldMap["date"] = t.Date
	t.fieldMap["cnt"] = t.Cnt
	t.fieldMap["device"] = t.Device
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["update_time"] = t.UpdateTime
	t.fieldMap["del_flag"] = t.DelFlag
}

func (t tLinkDeviceStat) clone(db *gorm.DB) tLinkDeviceStat {
	t.tLinkDeviceStatDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tLinkDeviceStat) replaceDB(db *gorm.DB) tLinkDeviceStat {
	t.tLinkDeviceStatDo.ReplaceDB(db)
	return t
}

type tLinkDeviceStatDo struct{ gen.DO }

type ITLinkDeviceStatDo interface {
	gen.SubQuery
	Debug() ITLinkDeviceStatDo
	WithContext(ctx context.Context) ITLinkDeviceStatDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITLinkDeviceStatDo
	WriteDB() ITLinkDeviceStatDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITLinkDeviceStatDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITLinkDeviceStatDo
	Not(conds ...gen.Condition) ITLinkDeviceStatDo
	Or(conds ...gen.Condition) ITLinkDeviceStatDo
	Select(conds ...field.Expr) ITLinkDeviceStatDo
	Where(conds ...gen.Condition) ITLinkDeviceStatDo
	Order(conds ...field.Expr) ITLinkDeviceStatDo
	Distinct(cols ...field.Expr) ITLinkDeviceStatDo
	Omit(cols ...field.Expr) ITLinkDeviceStatDo
	Join(table schema.Tabler, on ...field.Expr) ITLinkDeviceStatDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITLinkDeviceStatDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITLinkDeviceStatDo
	Group(cols ...field.Expr) ITLinkDeviceStatDo
	Having(conds ...gen.Condition) ITLinkDeviceStatDo
	Limit(limit int) ITLinkDeviceStatDo
	Offset(offset int) ITLinkDeviceStatDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITLinkDeviceStatDo
	Unscoped() ITLinkDeviceStatDo
	Create(values ...*model.TLinkDeviceStat) error
	CreateInBatches(values []*model.TLinkDeviceStat, batchSize int) error
	Save(values ...*model.TLinkDeviceStat) error
	First() (*model.TLinkDeviceStat, error)
	Take() (*model.TLinkDeviceStat, error)
	Last() (*model.TLinkDeviceStat, error)
	Find() ([]*model.TLinkDeviceStat, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TLinkDeviceStat, err error)
	FindInBatches(result *[]*model.TLinkDeviceStat, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TLinkDeviceStat) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITLinkDeviceStatDo
	Assign(attrs ...field.AssignExpr) ITLinkDeviceStatDo
	Joins(fields ...field.RelationField) ITLinkDeviceStatDo
	Preload(fields ...field.RelationField) ITLinkDeviceStatDo
	FirstOrInit() (*model.TLinkDeviceStat, error)
	FirstOrCreate() (*model.TLinkDeviceStat, error)
	FindByPage(offset int, limit int) (result []*model.TLinkDeviceStat, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITLinkDeviceStatDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tLinkDeviceStatDo) Debug() ITLinkDeviceStatDo {
	return t.withDO(t.DO.Debug())
}

func (t tLinkDeviceStatDo) WithContext(ctx context.Context) ITLinkDeviceStatDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tLinkDeviceStatDo) ReadDB() ITLinkDeviceStatDo {
	return t.Clauses(dbresolver.Read)
}

func (t tLinkDeviceStatDo) WriteDB() ITLinkDeviceStatDo {
	return t.Clauses(dbresolver.Write)
}

func (t tLinkDeviceStatDo) Session(config *gorm.Session) ITLinkDeviceStatDo {
	return t.withDO(t.DO.Session(config))
}

func (t tLinkDeviceStatDo) Clauses(conds ...clause.Expression) ITLinkDeviceStatDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tLinkDeviceStatDo) Returning(value interface{}, columns ...string) ITLinkDeviceStatDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tLinkDeviceStatDo) Not(conds ...gen.Condition) ITLinkDeviceStatDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tLinkDeviceStatDo) Or(conds ...gen.Condition) ITLinkDeviceStatDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tLinkDeviceStatDo) Select(conds ...field.Expr) ITLinkDeviceStatDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tLinkDeviceStatDo) Where(conds ...gen.Condition) ITLinkDeviceStatDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tLinkDeviceStatDo) Order(conds ...field.Expr) ITLinkDeviceStatDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tLinkDeviceStatDo) Distinct(cols ...field.Expr) ITLinkDeviceStatDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tLinkDeviceStatDo) Omit(cols ...field.Expr) ITLinkDeviceStatDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tLinkDeviceStatDo) Join(table schema.Tabler, on ...field.Expr) ITLinkDeviceStatDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tLinkDeviceStatDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITLinkDeviceStatDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tLinkDeviceStatDo) RightJoin(table schema.Tabler, on ...field.Expr) ITLinkDeviceStatDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tLinkDeviceStatDo) Group(cols ...field.Expr) ITLinkDeviceStatDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tLinkDeviceStatDo) Having(conds ...gen.Condition) ITLinkDeviceStatDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tLinkDeviceStatDo) Limit(limit int) ITLinkDeviceStatDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tLinkDeviceStatDo) Offset(offset int) ITLinkDeviceStatDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tLinkDeviceStatDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITLinkDeviceStatDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tLinkDeviceStatDo) Unscoped() ITLinkDeviceStatDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tLinkDeviceStatDo) Create(values ...*model.TLinkDeviceStat) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tLinkDeviceStatDo) CreateInBatches(values []*model.TLinkDeviceStat, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tLinkDeviceStatDo) Save(values ...*model.TLinkDeviceStat) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tLinkDeviceStatDo) First() (*model.TLinkDeviceStat, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLinkDeviceStat), nil
	}
}

func (t tLinkDeviceStatDo) Take() (*model.TLinkDeviceStat, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLinkDeviceStat), nil
	}
}

func (t tLinkDeviceStatDo) Last() (*model.TLinkDeviceStat, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLinkDeviceStat), nil
	}
}

func (t tLinkDeviceStatDo) Find() ([]*model.TLinkDeviceStat, error) {
	result, err := t.DO.Find()
	return result.([]*model.TLinkDeviceStat), err
}

func (t tLinkDeviceStatDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TLinkDeviceStat, err error) {
	buf := make([]*model.TLinkDeviceStat, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tLinkDeviceStatDo) FindInBatches(result *[]*model.TLinkDeviceStat, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tLinkDeviceStatDo) Attrs(attrs ...field.AssignExpr) ITLinkDeviceStatDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tLinkDeviceStatDo) Assign(attrs ...field.AssignExpr) ITLinkDeviceStatDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tLinkDeviceStatDo) Joins(fields ...field.RelationField) ITLinkDeviceStatDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tLinkDeviceStatDo) Preload(fields ...field.RelationField) ITLinkDeviceStatDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tLinkDeviceStatDo) FirstOrInit() (*model.TLinkDeviceStat, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLinkDeviceStat), nil
	}
}

func (t tLinkDeviceStatDo) FirstOrCreate() (*model.TLinkDeviceStat, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLinkDeviceStat), nil
	}
}

func (t tLinkDeviceStatDo) FindByPage(offset int, limit int) (result []*model.TLinkDeviceStat, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tLinkDeviceStatDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tLinkDeviceStatDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tLinkDeviceStatDo) Delete(models ...*model.TLinkDeviceStat) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tLinkDeviceStatDo) withDO(do gen.Dao) *tLinkDeviceStatDo {
	t.DO = *do.(*gen.DO)
	return t
}
