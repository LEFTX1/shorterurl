// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-zero-shorterurl/admin/internal/dal/model"
)

func newTLinkOsStat(db *gorm.DB, opts ...gen.DOOption) tLinkOsStat {
	_tLinkOsStat := tLinkOsStat{}

	_tLinkOsStat.tLinkOsStatDo.UseDB(db, opts...)
	_tLinkOsStat.tLinkOsStatDo.UseModel(&model.TLinkOsStat{})

	tableName := _tLinkOsStat.tLinkOsStatDo.TableName()
	_tLinkOsStat.ALL = field.NewAsterisk(tableName)
	_tLinkOsStat.ID = field.NewInt64(tableName, "id")
	_tLinkOsStat.FullShortURL = field.NewString(tableName, "full_short_url")
	_tLinkOsStat.Date = field.NewTime(tableName, "date")
	_tLinkOsStat.Cnt = field.NewInt32(tableName, "cnt")
	_tLinkOsStat.Os = field.NewString(tableName, "os")
	_tLinkOsStat.CreateTime = field.NewTime(tableName, "create_time")
	_tLinkOsStat.UpdateTime = field.NewTime(tableName, "update_time")
	_tLinkOsStat.DelFlag = field.NewBool(tableName, "del_flag")

	_tLinkOsStat.fillFieldMap()

	return _tLinkOsStat
}

type tLinkOsStat struct {
	tLinkOsStatDo

	ALL          field.Asterisk
	ID           field.Int64  // ID
	FullShortURL field.String // 完整短链接
	Date         field.Time   // 日期
	Cnt          field.Int32  // 访问量
	Os           field.String // 操作系统
	CreateTime   field.Time   // 创建时间
	UpdateTime   field.Time   // 修改时间
	DelFlag      field.Bool   // 删除标识 0：未删除 1：已删除

	fieldMap map[string]field.Expr
}

func (t tLinkOsStat) Table(newTableName string) *tLinkOsStat {
	t.tLinkOsStatDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tLinkOsStat) As(alias string) *tLinkOsStat {
	t.tLinkOsStatDo.DO = *(t.tLinkOsStatDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tLinkOsStat) updateTableName(table string) *tLinkOsStat {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.FullShortURL = field.NewString(table, "full_short_url")
	t.Date = field.NewTime(table, "date")
	t.Cnt = field.NewInt32(table, "cnt")
	t.Os = field.NewString(table, "os")
	t.CreateTime = field.NewTime(table, "create_time")
	t.UpdateTime = field.NewTime(table, "update_time")
	t.DelFlag = field.NewBool(table, "del_flag")

	t.fillFieldMap()

	return t
}

func (t *tLinkOsStat) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tLinkOsStat) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.ID
	t.fieldMap["full_short_url"] = t.FullShortURL
	t.fieldMap["date"] = t.Date
	t.fieldMap["cnt"] = t.Cnt
	t.fieldMap["os"] = t.Os
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["update_time"] = t.UpdateTime
	t.fieldMap["del_flag"] = t.DelFlag
}

func (t tLinkOsStat) clone(db *gorm.DB) tLinkOsStat {
	t.tLinkOsStatDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tLinkOsStat) replaceDB(db *gorm.DB) tLinkOsStat {
	t.tLinkOsStatDo.ReplaceDB(db)
	return t
}

type tLinkOsStatDo struct{ gen.DO }

type ITLinkOsStatDo interface {
	gen.SubQuery
	Debug() ITLinkOsStatDo
	WithContext(ctx context.Context) ITLinkOsStatDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITLinkOsStatDo
	WriteDB() ITLinkOsStatDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITLinkOsStatDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITLinkOsStatDo
	Not(conds ...gen.Condition) ITLinkOsStatDo
	Or(conds ...gen.Condition) ITLinkOsStatDo
	Select(conds ...field.Expr) ITLinkOsStatDo
	Where(conds ...gen.Condition) ITLinkOsStatDo
	Order(conds ...field.Expr) ITLinkOsStatDo
	Distinct(cols ...field.Expr) ITLinkOsStatDo
	Omit(cols ...field.Expr) ITLinkOsStatDo
	Join(table schema.Tabler, on ...field.Expr) ITLinkOsStatDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITLinkOsStatDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITLinkOsStatDo
	Group(cols ...field.Expr) ITLinkOsStatDo
	Having(conds ...gen.Condition) ITLinkOsStatDo
	Limit(limit int) ITLinkOsStatDo
	Offset(offset int) ITLinkOsStatDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITLinkOsStatDo
	Unscoped() ITLinkOsStatDo
	Create(values ...*model.TLinkOsStat) error
	CreateInBatches(values []*model.TLinkOsStat, batchSize int) error
	Save(values ...*model.TLinkOsStat) error
	First() (*model.TLinkOsStat, error)
	Take() (*model.TLinkOsStat, error)
	Last() (*model.TLinkOsStat, error)
	Find() ([]*model.TLinkOsStat, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TLinkOsStat, err error)
	FindInBatches(result *[]*model.TLinkOsStat, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TLinkOsStat) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITLinkOsStatDo
	Assign(attrs ...field.AssignExpr) ITLinkOsStatDo
	Joins(fields ...field.RelationField) ITLinkOsStatDo
	Preload(fields ...field.RelationField) ITLinkOsStatDo
	FirstOrInit() (*model.TLinkOsStat, error)
	FirstOrCreate() (*model.TLinkOsStat, error)
	FindByPage(offset int, limit int) (result []*model.TLinkOsStat, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITLinkOsStatDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tLinkOsStatDo) Debug() ITLinkOsStatDo {
	return t.withDO(t.DO.Debug())
}

func (t tLinkOsStatDo) WithContext(ctx context.Context) ITLinkOsStatDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tLinkOsStatDo) ReadDB() ITLinkOsStatDo {
	return t.Clauses(dbresolver.Read)
}

func (t tLinkOsStatDo) WriteDB() ITLinkOsStatDo {
	return t.Clauses(dbresolver.Write)
}

func (t tLinkOsStatDo) Session(config *gorm.Session) ITLinkOsStatDo {
	return t.withDO(t.DO.Session(config))
}

func (t tLinkOsStatDo) Clauses(conds ...clause.Expression) ITLinkOsStatDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tLinkOsStatDo) Returning(value interface{}, columns ...string) ITLinkOsStatDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tLinkOsStatDo) Not(conds ...gen.Condition) ITLinkOsStatDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tLinkOsStatDo) Or(conds ...gen.Condition) ITLinkOsStatDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tLinkOsStatDo) Select(conds ...field.Expr) ITLinkOsStatDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tLinkOsStatDo) Where(conds ...gen.Condition) ITLinkOsStatDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tLinkOsStatDo) Order(conds ...field.Expr) ITLinkOsStatDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tLinkOsStatDo) Distinct(cols ...field.Expr) ITLinkOsStatDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tLinkOsStatDo) Omit(cols ...field.Expr) ITLinkOsStatDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tLinkOsStatDo) Join(table schema.Tabler, on ...field.Expr) ITLinkOsStatDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tLinkOsStatDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITLinkOsStatDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tLinkOsStatDo) RightJoin(table schema.Tabler, on ...field.Expr) ITLinkOsStatDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tLinkOsStatDo) Group(cols ...field.Expr) ITLinkOsStatDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tLinkOsStatDo) Having(conds ...gen.Condition) ITLinkOsStatDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tLinkOsStatDo) Limit(limit int) ITLinkOsStatDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tLinkOsStatDo) Offset(offset int) ITLinkOsStatDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tLinkOsStatDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITLinkOsStatDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tLinkOsStatDo) Unscoped() ITLinkOsStatDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tLinkOsStatDo) Create(values ...*model.TLinkOsStat) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tLinkOsStatDo) CreateInBatches(values []*model.TLinkOsStat, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tLinkOsStatDo) Save(values ...*model.TLinkOsStat) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tLinkOsStatDo) First() (*model.TLinkOsStat, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLinkOsStat), nil
	}
}

func (t tLinkOsStatDo) Take() (*model.TLinkOsStat, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLinkOsStat), nil
	}
}

func (t tLinkOsStatDo) Last() (*model.TLinkOsStat, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLinkOsStat), nil
	}
}

func (t tLinkOsStatDo) Find() ([]*model.TLinkOsStat, error) {
	result, err := t.DO.Find()
	return result.([]*model.TLinkOsStat), err
}

func (t tLinkOsStatDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TLinkOsStat, err error) {
	buf := make([]*model.TLinkOsStat, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tLinkOsStatDo) FindInBatches(result *[]*model.TLinkOsStat, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tLinkOsStatDo) Attrs(attrs ...field.AssignExpr) ITLinkOsStatDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tLinkOsStatDo) Assign(attrs ...field.AssignExpr) ITLinkOsStatDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tLinkOsStatDo) Joins(fields ...field.RelationField) ITLinkOsStatDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tLinkOsStatDo) Preload(fields ...field.RelationField) ITLinkOsStatDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tLinkOsStatDo) FirstOrInit() (*model.TLinkOsStat, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLinkOsStat), nil
	}
}

func (t tLinkOsStatDo) FirstOrCreate() (*model.TLinkOsStat, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLinkOsStat), nil
	}
}

func (t tLinkOsStatDo) FindByPage(offset int, limit int) (result []*model.TLinkOsStat, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tLinkOsStatDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tLinkOsStatDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tLinkOsStatDo) Delete(models ...*model.TLinkOsStat) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tLinkOsStatDo) withDO(do gen.Dao) *tLinkOsStatDo {
	t.DO = *do.(*gen.DO)
	return t
}
