// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"shorterurl/user/rpc/internal/dal/model"
)

func newTLinkAccessLog(db *gorm.DB, opts ...gen.DOOption) tLinkAccessLog {
	_tLinkAccessLog := tLinkAccessLog{}

	_tLinkAccessLog.tLinkAccessLogDo.UseDB(db, opts...)
	_tLinkAccessLog.tLinkAccessLogDo.UseModel(&model.TLinkAccessLog{})

	tableName := _tLinkAccessLog.tLinkAccessLogDo.TableName()
	_tLinkAccessLog.ALL = field.NewAsterisk(tableName)
	_tLinkAccessLog.ID = field.NewInt64(tableName, "id")
	_tLinkAccessLog.FullShortURL = field.NewString(tableName, "full_short_url")
	_tLinkAccessLog.User = field.NewString(tableName, "user")
	_tLinkAccessLog.IP = field.NewString(tableName, "ip")
	_tLinkAccessLog.Browser = field.NewString(tableName, "browser")
	_tLinkAccessLog.Os = field.NewString(tableName, "os")
	_tLinkAccessLog.Network = field.NewString(tableName, "network")
	_tLinkAccessLog.Device = field.NewString(tableName, "device")
	_tLinkAccessLog.Locale = field.NewString(tableName, "locale")
	_tLinkAccessLog.CreateTime = field.NewTime(tableName, "create_time")
	_tLinkAccessLog.UpdateTime = field.NewTime(tableName, "update_time")
	_tLinkAccessLog.DelFlag = field.NewBool(tableName, "del_flag")

	_tLinkAccessLog.fillFieldMap()

	return _tLinkAccessLog
}

type tLinkAccessLog struct {
	tLinkAccessLogDo

	ALL          field.Asterisk
	ID           field.Int64  // ID
	FullShortURL field.String // 完整短链接
	User         field.String // 用户信息
	IP           field.String // IP
	Browser      field.String // 浏览器
	Os           field.String // 操作系统
	Network      field.String // 访问网络
	Device       field.String // 访问设备
	Locale       field.String // 地区
	CreateTime   field.Time   // 创建时间
	UpdateTime   field.Time   // 修改时间
	DelFlag      field.Bool   // 删除标识 0：未删除 1：已删除

	fieldMap map[string]field.Expr
}

func (t tLinkAccessLog) Table(newTableName string) *tLinkAccessLog {
	t.tLinkAccessLogDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tLinkAccessLog) As(alias string) *tLinkAccessLog {
	t.tLinkAccessLogDo.DO = *(t.tLinkAccessLogDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tLinkAccessLog) updateTableName(table string) *tLinkAccessLog {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.FullShortURL = field.NewString(table, "full_short_url")
	t.User = field.NewString(table, "user")
	t.IP = field.NewString(table, "ip")
	t.Browser = field.NewString(table, "browser")
	t.Os = field.NewString(table, "os")
	t.Network = field.NewString(table, "network")
	t.Device = field.NewString(table, "device")
	t.Locale = field.NewString(table, "locale")
	t.CreateTime = field.NewTime(table, "create_time")
	t.UpdateTime = field.NewTime(table, "update_time")
	t.DelFlag = field.NewBool(table, "del_flag")

	t.fillFieldMap()

	return t
}

func (t *tLinkAccessLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tLinkAccessLog) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 12)
	t.fieldMap["id"] = t.ID
	t.fieldMap["full_short_url"] = t.FullShortURL
	t.fieldMap["user"] = t.User
	t.fieldMap["ip"] = t.IP
	t.fieldMap["browser"] = t.Browser
	t.fieldMap["os"] = t.Os
	t.fieldMap["network"] = t.Network
	t.fieldMap["device"] = t.Device
	t.fieldMap["locale"] = t.Locale
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["update_time"] = t.UpdateTime
	t.fieldMap["del_flag"] = t.DelFlag
}

func (t tLinkAccessLog) clone(db *gorm.DB) tLinkAccessLog {
	t.tLinkAccessLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tLinkAccessLog) replaceDB(db *gorm.DB) tLinkAccessLog {
	t.tLinkAccessLogDo.ReplaceDB(db)
	return t
}

type tLinkAccessLogDo struct{ gen.DO }

type ITLinkAccessLogDo interface {
	gen.SubQuery
	Debug() ITLinkAccessLogDo
	WithContext(ctx context.Context) ITLinkAccessLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITLinkAccessLogDo
	WriteDB() ITLinkAccessLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITLinkAccessLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITLinkAccessLogDo
	Not(conds ...gen.Condition) ITLinkAccessLogDo
	Or(conds ...gen.Condition) ITLinkAccessLogDo
	Select(conds ...field.Expr) ITLinkAccessLogDo
	Where(conds ...gen.Condition) ITLinkAccessLogDo
	Order(conds ...field.Expr) ITLinkAccessLogDo
	Distinct(cols ...field.Expr) ITLinkAccessLogDo
	Omit(cols ...field.Expr) ITLinkAccessLogDo
	Join(table schema.Tabler, on ...field.Expr) ITLinkAccessLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITLinkAccessLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITLinkAccessLogDo
	Group(cols ...field.Expr) ITLinkAccessLogDo
	Having(conds ...gen.Condition) ITLinkAccessLogDo
	Limit(limit int) ITLinkAccessLogDo
	Offset(offset int) ITLinkAccessLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITLinkAccessLogDo
	Unscoped() ITLinkAccessLogDo
	Create(values ...*model.TLinkAccessLog) error
	CreateInBatches(values []*model.TLinkAccessLog, batchSize int) error
	Save(values ...*model.TLinkAccessLog) error
	First() (*model.TLinkAccessLog, error)
	Take() (*model.TLinkAccessLog, error)
	Last() (*model.TLinkAccessLog, error)
	Find() ([]*model.TLinkAccessLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TLinkAccessLog, err error)
	FindInBatches(result *[]*model.TLinkAccessLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TLinkAccessLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITLinkAccessLogDo
	Assign(attrs ...field.AssignExpr) ITLinkAccessLogDo
	Joins(fields ...field.RelationField) ITLinkAccessLogDo
	Preload(fields ...field.RelationField) ITLinkAccessLogDo
	FirstOrInit() (*model.TLinkAccessLog, error)
	FirstOrCreate() (*model.TLinkAccessLog, error)
	FindByPage(offset int, limit int) (result []*model.TLinkAccessLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITLinkAccessLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tLinkAccessLogDo) Debug() ITLinkAccessLogDo {
	return t.withDO(t.DO.Debug())
}

func (t tLinkAccessLogDo) WithContext(ctx context.Context) ITLinkAccessLogDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tLinkAccessLogDo) ReadDB() ITLinkAccessLogDo {
	return t.Clauses(dbresolver.Read)
}

func (t tLinkAccessLogDo) WriteDB() ITLinkAccessLogDo {
	return t.Clauses(dbresolver.Write)
}

func (t tLinkAccessLogDo) Session(config *gorm.Session) ITLinkAccessLogDo {
	return t.withDO(t.DO.Session(config))
}

func (t tLinkAccessLogDo) Clauses(conds ...clause.Expression) ITLinkAccessLogDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tLinkAccessLogDo) Returning(value interface{}, columns ...string) ITLinkAccessLogDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tLinkAccessLogDo) Not(conds ...gen.Condition) ITLinkAccessLogDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tLinkAccessLogDo) Or(conds ...gen.Condition) ITLinkAccessLogDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tLinkAccessLogDo) Select(conds ...field.Expr) ITLinkAccessLogDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tLinkAccessLogDo) Where(conds ...gen.Condition) ITLinkAccessLogDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tLinkAccessLogDo) Order(conds ...field.Expr) ITLinkAccessLogDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tLinkAccessLogDo) Distinct(cols ...field.Expr) ITLinkAccessLogDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tLinkAccessLogDo) Omit(cols ...field.Expr) ITLinkAccessLogDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tLinkAccessLogDo) Join(table schema.Tabler, on ...field.Expr) ITLinkAccessLogDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tLinkAccessLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITLinkAccessLogDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tLinkAccessLogDo) RightJoin(table schema.Tabler, on ...field.Expr) ITLinkAccessLogDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tLinkAccessLogDo) Group(cols ...field.Expr) ITLinkAccessLogDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tLinkAccessLogDo) Having(conds ...gen.Condition) ITLinkAccessLogDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tLinkAccessLogDo) Limit(limit int) ITLinkAccessLogDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tLinkAccessLogDo) Offset(offset int) ITLinkAccessLogDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tLinkAccessLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITLinkAccessLogDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tLinkAccessLogDo) Unscoped() ITLinkAccessLogDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tLinkAccessLogDo) Create(values ...*model.TLinkAccessLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tLinkAccessLogDo) CreateInBatches(values []*model.TLinkAccessLog, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tLinkAccessLogDo) Save(values ...*model.TLinkAccessLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tLinkAccessLogDo) First() (*model.TLinkAccessLog, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLinkAccessLog), nil
	}
}

func (t tLinkAccessLogDo) Take() (*model.TLinkAccessLog, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLinkAccessLog), nil
	}
}

func (t tLinkAccessLogDo) Last() (*model.TLinkAccessLog, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLinkAccessLog), nil
	}
}

func (t tLinkAccessLogDo) Find() ([]*model.TLinkAccessLog, error) {
	result, err := t.DO.Find()
	return result.([]*model.TLinkAccessLog), err
}

func (t tLinkAccessLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TLinkAccessLog, err error) {
	buf := make([]*model.TLinkAccessLog, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tLinkAccessLogDo) FindInBatches(result *[]*model.TLinkAccessLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tLinkAccessLogDo) Attrs(attrs ...field.AssignExpr) ITLinkAccessLogDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tLinkAccessLogDo) Assign(attrs ...field.AssignExpr) ITLinkAccessLogDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tLinkAccessLogDo) Joins(fields ...field.RelationField) ITLinkAccessLogDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tLinkAccessLogDo) Preload(fields ...field.RelationField) ITLinkAccessLogDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tLinkAccessLogDo) FirstOrInit() (*model.TLinkAccessLog, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLinkAccessLog), nil
	}
}

func (t tLinkAccessLogDo) FirstOrCreate() (*model.TLinkAccessLog, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLinkAccessLog), nil
	}
}

func (t tLinkAccessLogDo) FindByPage(offset int, limit int) (result []*model.TLinkAccessLog, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tLinkAccessLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tLinkAccessLogDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tLinkAccessLogDo) Delete(models ...*model.TLinkAccessLog) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tLinkAccessLogDo) withDO(do gen.Dao) *tLinkAccessLogDo {
	t.DO = *do.(*gen.DO)
	return t
}
