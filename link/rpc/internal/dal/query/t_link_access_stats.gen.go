// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"shorterurl/user/rpc/internal/dal/model"
)

func newTLinkAccessStat(db *gorm.DB, opts ...gen.DOOption) tLinkAccessStat {
	_tLinkAccessStat := tLinkAccessStat{}

	_tLinkAccessStat.tLinkAccessStatDo.UseDB(db, opts...)
	_tLinkAccessStat.tLinkAccessStatDo.UseModel(&model.TLinkAccessStat{})

	tableName := _tLinkAccessStat.tLinkAccessStatDo.TableName()
	_tLinkAccessStat.ALL = field.NewAsterisk(tableName)
	_tLinkAccessStat.ID = field.NewInt64(tableName, "id")
	_tLinkAccessStat.FullShortURL = field.NewString(tableName, "full_short_url")
	_tLinkAccessStat.Date = field.NewTime(tableName, "date")
	_tLinkAccessStat.Pv = field.NewInt32(tableName, "pv")
	_tLinkAccessStat.Uv = field.NewInt32(tableName, "uv")
	_tLinkAccessStat.Uip = field.NewInt32(tableName, "uip")
	_tLinkAccessStat.Hour = field.NewInt32(tableName, "hour")
	_tLinkAccessStat.Weekday = field.NewInt32(tableName, "weekday")
	_tLinkAccessStat.CreateTime = field.NewTime(tableName, "create_time")
	_tLinkAccessStat.UpdateTime = field.NewTime(tableName, "update_time")
	_tLinkAccessStat.DelFlag = field.NewBool(tableName, "del_flag")

	_tLinkAccessStat.fillFieldMap()

	return _tLinkAccessStat
}

type tLinkAccessStat struct {
	tLinkAccessStatDo

	ALL          field.Asterisk
	ID           field.Int64  // ID
	FullShortURL field.String // 完整短链接
	Date         field.Time   // 日期
	Pv           field.Int32  // 访问量
	Uv           field.Int32  // 独立访客数
	Uip          field.Int32  // 独立IP数
	Hour         field.Int32  // 小时
	Weekday      field.Int32  // 星期
	CreateTime   field.Time   // 创建时间
	UpdateTime   field.Time   // 修改时间
	DelFlag      field.Bool   // 删除标识 0：未删除 1：已删除

	fieldMap map[string]field.Expr
}

func (t tLinkAccessStat) Table(newTableName string) *tLinkAccessStat {
	t.tLinkAccessStatDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tLinkAccessStat) As(alias string) *tLinkAccessStat {
	t.tLinkAccessStatDo.DO = *(t.tLinkAccessStatDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tLinkAccessStat) updateTableName(table string) *tLinkAccessStat {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.FullShortURL = field.NewString(table, "full_short_url")
	t.Date = field.NewTime(table, "date")
	t.Pv = field.NewInt32(table, "pv")
	t.Uv = field.NewInt32(table, "uv")
	t.Uip = field.NewInt32(table, "uip")
	t.Hour = field.NewInt32(table, "hour")
	t.Weekday = field.NewInt32(table, "weekday")
	t.CreateTime = field.NewTime(table, "create_time")
	t.UpdateTime = field.NewTime(table, "update_time")
	t.DelFlag = field.NewBool(table, "del_flag")

	t.fillFieldMap()

	return t
}

func (t *tLinkAccessStat) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tLinkAccessStat) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["id"] = t.ID
	t.fieldMap["full_short_url"] = t.FullShortURL
	t.fieldMap["date"] = t.Date
	t.fieldMap["pv"] = t.Pv
	t.fieldMap["uv"] = t.Uv
	t.fieldMap["uip"] = t.Uip
	t.fieldMap["hour"] = t.Hour
	t.fieldMap["weekday"] = t.Weekday
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["update_time"] = t.UpdateTime
	t.fieldMap["del_flag"] = t.DelFlag
}

func (t tLinkAccessStat) clone(db *gorm.DB) tLinkAccessStat {
	t.tLinkAccessStatDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tLinkAccessStat) replaceDB(db *gorm.DB) tLinkAccessStat {
	t.tLinkAccessStatDo.ReplaceDB(db)
	return t
}

type tLinkAccessStatDo struct{ gen.DO }

type ITLinkAccessStatDo interface {
	gen.SubQuery
	Debug() ITLinkAccessStatDo
	WithContext(ctx context.Context) ITLinkAccessStatDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITLinkAccessStatDo
	WriteDB() ITLinkAccessStatDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITLinkAccessStatDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITLinkAccessStatDo
	Not(conds ...gen.Condition) ITLinkAccessStatDo
	Or(conds ...gen.Condition) ITLinkAccessStatDo
	Select(conds ...field.Expr) ITLinkAccessStatDo
	Where(conds ...gen.Condition) ITLinkAccessStatDo
	Order(conds ...field.Expr) ITLinkAccessStatDo
	Distinct(cols ...field.Expr) ITLinkAccessStatDo
	Omit(cols ...field.Expr) ITLinkAccessStatDo
	Join(table schema.Tabler, on ...field.Expr) ITLinkAccessStatDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITLinkAccessStatDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITLinkAccessStatDo
	Group(cols ...field.Expr) ITLinkAccessStatDo
	Having(conds ...gen.Condition) ITLinkAccessStatDo
	Limit(limit int) ITLinkAccessStatDo
	Offset(offset int) ITLinkAccessStatDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITLinkAccessStatDo
	Unscoped() ITLinkAccessStatDo
	Create(values ...*model.TLinkAccessStat) error
	CreateInBatches(values []*model.TLinkAccessStat, batchSize int) error
	Save(values ...*model.TLinkAccessStat) error
	First() (*model.TLinkAccessStat, error)
	Take() (*model.TLinkAccessStat, error)
	Last() (*model.TLinkAccessStat, error)
	Find() ([]*model.TLinkAccessStat, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TLinkAccessStat, err error)
	FindInBatches(result *[]*model.TLinkAccessStat, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TLinkAccessStat) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITLinkAccessStatDo
	Assign(attrs ...field.AssignExpr) ITLinkAccessStatDo
	Joins(fields ...field.RelationField) ITLinkAccessStatDo
	Preload(fields ...field.RelationField) ITLinkAccessStatDo
	FirstOrInit() (*model.TLinkAccessStat, error)
	FirstOrCreate() (*model.TLinkAccessStat, error)
	FindByPage(offset int, limit int) (result []*model.TLinkAccessStat, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITLinkAccessStatDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tLinkAccessStatDo) Debug() ITLinkAccessStatDo {
	return t.withDO(t.DO.Debug())
}

func (t tLinkAccessStatDo) WithContext(ctx context.Context) ITLinkAccessStatDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tLinkAccessStatDo) ReadDB() ITLinkAccessStatDo {
	return t.Clauses(dbresolver.Read)
}

func (t tLinkAccessStatDo) WriteDB() ITLinkAccessStatDo {
	return t.Clauses(dbresolver.Write)
}

func (t tLinkAccessStatDo) Session(config *gorm.Session) ITLinkAccessStatDo {
	return t.withDO(t.DO.Session(config))
}

func (t tLinkAccessStatDo) Clauses(conds ...clause.Expression) ITLinkAccessStatDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tLinkAccessStatDo) Returning(value interface{}, columns ...string) ITLinkAccessStatDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tLinkAccessStatDo) Not(conds ...gen.Condition) ITLinkAccessStatDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tLinkAccessStatDo) Or(conds ...gen.Condition) ITLinkAccessStatDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tLinkAccessStatDo) Select(conds ...field.Expr) ITLinkAccessStatDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tLinkAccessStatDo) Where(conds ...gen.Condition) ITLinkAccessStatDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tLinkAccessStatDo) Order(conds ...field.Expr) ITLinkAccessStatDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tLinkAccessStatDo) Distinct(cols ...field.Expr) ITLinkAccessStatDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tLinkAccessStatDo) Omit(cols ...field.Expr) ITLinkAccessStatDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tLinkAccessStatDo) Join(table schema.Tabler, on ...field.Expr) ITLinkAccessStatDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tLinkAccessStatDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITLinkAccessStatDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tLinkAccessStatDo) RightJoin(table schema.Tabler, on ...field.Expr) ITLinkAccessStatDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tLinkAccessStatDo) Group(cols ...field.Expr) ITLinkAccessStatDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tLinkAccessStatDo) Having(conds ...gen.Condition) ITLinkAccessStatDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tLinkAccessStatDo) Limit(limit int) ITLinkAccessStatDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tLinkAccessStatDo) Offset(offset int) ITLinkAccessStatDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tLinkAccessStatDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITLinkAccessStatDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tLinkAccessStatDo) Unscoped() ITLinkAccessStatDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tLinkAccessStatDo) Create(values ...*model.TLinkAccessStat) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tLinkAccessStatDo) CreateInBatches(values []*model.TLinkAccessStat, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tLinkAccessStatDo) Save(values ...*model.TLinkAccessStat) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tLinkAccessStatDo) First() (*model.TLinkAccessStat, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLinkAccessStat), nil
	}
}

func (t tLinkAccessStatDo) Take() (*model.TLinkAccessStat, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLinkAccessStat), nil
	}
}

func (t tLinkAccessStatDo) Last() (*model.TLinkAccessStat, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLinkAccessStat), nil
	}
}

func (t tLinkAccessStatDo) Find() ([]*model.TLinkAccessStat, error) {
	result, err := t.DO.Find()
	return result.([]*model.TLinkAccessStat), err
}

func (t tLinkAccessStatDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TLinkAccessStat, err error) {
	buf := make([]*model.TLinkAccessStat, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tLinkAccessStatDo) FindInBatches(result *[]*model.TLinkAccessStat, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tLinkAccessStatDo) Attrs(attrs ...field.AssignExpr) ITLinkAccessStatDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tLinkAccessStatDo) Assign(attrs ...field.AssignExpr) ITLinkAccessStatDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tLinkAccessStatDo) Joins(fields ...field.RelationField) ITLinkAccessStatDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tLinkAccessStatDo) Preload(fields ...field.RelationField) ITLinkAccessStatDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tLinkAccessStatDo) FirstOrInit() (*model.TLinkAccessStat, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLinkAccessStat), nil
	}
}

func (t tLinkAccessStatDo) FirstOrCreate() (*model.TLinkAccessStat, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLinkAccessStat), nil
	}
}

func (t tLinkAccessStatDo) FindByPage(offset int, limit int) (result []*model.TLinkAccessStat, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tLinkAccessStatDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tLinkAccessStatDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tLinkAccessStatDo) Delete(models ...*model.TLinkAccessStat) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tLinkAccessStatDo) withDO(do gen.Dao) *tLinkAccessStatDo {
	t.DO = *do.(*gen.DO)
	return t
}
