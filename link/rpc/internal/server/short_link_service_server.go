// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.1
// Source: link.proto

package server

import (
	"context"

	"shorterurl/link/rpc/internal/logic"
	"shorterurl/link/rpc/internal/svc"
	"shorterurl/link/rpc/pb"
)

type ShortLinkServiceServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedShortLinkServiceServer
}

func NewShortLinkServiceServer(svcCtx *svc.ServiceContext) *ShortLinkServiceServer {
	return &ShortLinkServiceServer{
		svcCtx: svcCtx,
	}
}

// --------------------- 短链接管理接口 ---------------------
func (s *ShortLinkServiceServer) ShortLinkCreate(ctx context.Context, in *pb.CreateShortLinkRequest) (*pb.CreateShortLinkResponse, error) {
	l := logic.NewShortLinkCreateLogic(ctx, s.svcCtx)
	return l.ShortLinkCreate(in)
}

func (s *ShortLinkServiceServer) ShortLinkBatchCreate(ctx context.Context, in *pb.BatchCreateShortLinkRequest) (*pb.BatchCreateShortLinkResponse, error) {
	l := logic.NewShortLinkBatchCreateLogic(ctx, s.svcCtx)
	return l.ShortLinkBatchCreate(in)
}

func (s *ShortLinkServiceServer) ShortLinkUpdate(ctx context.Context, in *pb.UpdateShortLinkRequest) (*pb.UpdateShortLinkResponse, error) {
	l := logic.NewShortLinkUpdateLogic(ctx, s.svcCtx)
	return l.ShortLinkUpdate(in)
}

func (s *ShortLinkServiceServer) ShortLinkPage(ctx context.Context, in *pb.PageShortLinkRequest) (*pb.PageShortLinkResponse, error) {
	l := logic.NewShortLinkPageLogic(ctx, s.svcCtx)
	return l.ShortLinkPage(in)
}

// 查询短链接分组内数量
func (s *ShortLinkServiceServer) ShortLinkListGroupCount(ctx context.Context, in *pb.GroupShortLinkCountRequest) (*pb.GroupShortLinkCountResponse, error) {
	l := logic.NewShortLinkListGroupCountLogic(ctx, s.svcCtx)
	return l.ShortLinkListGroupCount(in)
}

// 短链接跳转
func (s *ShortLinkServiceServer) RestoreUrl(ctx context.Context, in *pb.RestoreUrlRequest) (*pb.RestoreUrlResponse, error) {
	l := logic.NewRestoreUrlLogic(ctx, s.svcCtx)
	return l.RestoreUrl(in)
}

// 短链接统计
func (s *ShortLinkServiceServer) ShortLinkStats(ctx context.Context, in *pb.ShortLinkStatsRequest) (*pb.EmptyResponse, error) {
	l := logic.NewShortLinkStatsLogic(ctx, s.svcCtx)
	return l.ShortLinkStats(in)
}

// --------------------- 回收站管理接口 ---------------------
func (s *ShortLinkServiceServer) RecycleBinSave(ctx context.Context, in *pb.SaveToRecycleBinRequest) (*pb.SaveToRecycleBinResponse, error) {
	l := logic.NewRecycleBinSaveLogic(ctx, s.svcCtx)
	return l.RecycleBinSave(in)
}

func (s *ShortLinkServiceServer) RecycleBinRecover(ctx context.Context, in *pb.RecoverFromRecycleBinRequest) (*pb.RecoverFromRecycleBinResponse, error) {
	l := logic.NewRecycleBinRecoverLogic(ctx, s.svcCtx)
	return l.RecycleBinRecover(in)
}

func (s *ShortLinkServiceServer) RecycleBinRemove(ctx context.Context, in *pb.RemoveFromRecycleBinRequest) (*pb.RemoveFromRecycleBinResponse, error) {
	l := logic.NewRecycleBinRemoveLogic(ctx, s.svcCtx)
	return l.RecycleBinRemove(in)
}

func (s *ShortLinkServiceServer) RecycleBinPage(ctx context.Context, in *pb.PageRecycleBinShortLinkRequest) (*pb.PageRecycleBinShortLinkResponse, error) {
	l := logic.NewRecycleBinPageLogic(ctx, s.svcCtx)
	return l.RecycleBinPage(in)
}

// --------------------- 短链接统计接口 ---------------------
func (s *ShortLinkServiceServer) StatsGetSingle(ctx context.Context, in *pb.GetSingleStatsRequest) (*pb.GetSingleStatsResponse, error) {
	l := logic.NewStatsGetSingleLogic(ctx, s.svcCtx)
	return l.StatsGetSingle(in)
}

func (s *ShortLinkServiceServer) StatsGetGroup(ctx context.Context, in *pb.GetGroupStatsRequest) (*pb.GetGroupStatsResponse, error) {
	l := logic.NewStatsGetGroupLogic(ctx, s.svcCtx)
	return l.StatsGetGroup(in)
}

func (s *ShortLinkServiceServer) StatsAccessRecordQuery(ctx context.Context, in *pb.AccessRecordQueryRequest) (*pb.AccessRecordQueryResponse, error) {
	l := logic.NewStatsAccessRecordQueryLogic(ctx, s.svcCtx)
	return l.StatsAccessRecordQuery(in)
}

func (s *ShortLinkServiceServer) StatsGroupAccessRecordQuery(ctx context.Context, in *pb.GroupAccessRecordQueryRequest) (*pb.GroupAccessRecordQueryResponse, error) {
	l := logic.NewStatsGroupAccessRecordQueryLogic(ctx, s.svcCtx)
	return l.StatsGroupAccessRecordQuery(in)
}

// --------------------- URL标题功能接口 ---------------------
func (s *ShortLinkServiceServer) UrlTitleGet(ctx context.Context, in *pb.GetUrlTitleRequest) (*pb.GetUrlTitleResponse, error) {
	l := logic.NewUrlTitleGetLogic(ctx, s.svcCtx)
	return l.UrlTitleGet(in)
}

// --------------------- IP位置查询接口 ---------------------
func (s *ShortLinkServiceServer) GetIpLocation(ctx context.Context, in *pb.GetIPLocationRequest) (*pb.GetIPLocationResponse, error) {
	l := logic.NewGetIpLocationLogic(ctx, s.svcCtx)
	return l.GetIpLocation(in)
}
