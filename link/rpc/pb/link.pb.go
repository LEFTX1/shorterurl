// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.19.4
// source: link.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 创建短链接请求
type CreateShortLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain        string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`                                       // 域名
	OriginUrl     string `protobuf:"bytes,2,opt,name=origin_url,json=originUrl,proto3" json:"origin_url,omitempty"`                // 原始链接
	Gid           string `protobuf:"bytes,3,opt,name=gid,proto3" json:"gid,omitempty"`                                             // 分组标识
	ValidDateType int32  `protobuf:"varint,4,opt,name=valid_date_type,json=validDateType,proto3" json:"valid_date_type,omitempty"` // 有效期类型
	ValidDate     string `protobuf:"bytes,5,opt,name=valid_date,json=validDate,proto3" json:"valid_date,omitempty"`                // 有效期（ISO-8601格式）
	Describe      string `protobuf:"bytes,6,opt,name=describe,proto3" json:"describe,omitempty"`                                   // 描述
	CreatedType   int32  `protobuf:"varint,7,opt,name=created_type,json=createdType,proto3" json:"created_type,omitempty"`         // 创建类型
}

func (x *CreateShortLinkRequest) Reset() {
	*x = CreateShortLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateShortLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShortLinkRequest) ProtoMessage() {}

func (x *CreateShortLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShortLinkRequest.ProtoReflect.Descriptor instead.
func (*CreateShortLinkRequest) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{0}
}

func (x *CreateShortLinkRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CreateShortLinkRequest) GetOriginUrl() string {
	if x != nil {
		return x.OriginUrl
	}
	return ""
}

func (x *CreateShortLinkRequest) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *CreateShortLinkRequest) GetValidDateType() int32 {
	if x != nil {
		return x.ValidDateType
	}
	return 0
}

func (x *CreateShortLinkRequest) GetValidDate() string {
	if x != nil {
		return x.ValidDate
	}
	return ""
}

func (x *CreateShortLinkRequest) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *CreateShortLinkRequest) GetCreatedType() int32 {
	if x != nil {
		return x.CreatedType
	}
	return 0
}

// 创建短链接响应
type CreateShortLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullShortUrl string `protobuf:"bytes,1,opt,name=full_short_url,json=fullShortUrl,proto3" json:"full_short_url,omitempty"` // 完整短链接
	OriginUrl    string `protobuf:"bytes,2,opt,name=origin_url,json=originUrl,proto3" json:"origin_url,omitempty"`            // 原始链接
	Gid          string `protobuf:"bytes,3,opt,name=gid,proto3" json:"gid,omitempty"`                                         // 分组标识
}

func (x *CreateShortLinkResponse) Reset() {
	*x = CreateShortLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateShortLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShortLinkResponse) ProtoMessage() {}

func (x *CreateShortLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShortLinkResponse.ProtoReflect.Descriptor instead.
func (*CreateShortLinkResponse) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{1}
}

func (x *CreateShortLinkResponse) GetFullShortUrl() string {
	if x != nil {
		return x.FullShortUrl
	}
	return ""
}

func (x *CreateShortLinkResponse) GetOriginUrl() string {
	if x != nil {
		return x.OriginUrl
	}
	return ""
}

func (x *CreateShortLinkResponse) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

// 批量创建短链接请求
type BatchCreateShortLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginUrls    []string `protobuf:"bytes,1,rep,name=origin_urls,json=originUrls,proto3" json:"origin_urls,omitempty"`             // 原始链接列表
	Domain        string   `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`                                       // 域名
	Gid           string   `protobuf:"bytes,3,opt,name=gid,proto3" json:"gid,omitempty"`                                             // 分组标识
	ValidDateType int32    `protobuf:"varint,4,opt,name=valid_date_type,json=validDateType,proto3" json:"valid_date_type,omitempty"` // 有效期类型
	ValidDate     string   `protobuf:"bytes,5,opt,name=valid_date,json=validDate,proto3" json:"valid_date,omitempty"`                // 有效期（ISO-8601格式）
	Describe      string   `protobuf:"bytes,6,opt,name=describe,proto3" json:"describe,omitempty"`                                   // 描述
}

func (x *BatchCreateShortLinkRequest) Reset() {
	*x = BatchCreateShortLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateShortLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateShortLinkRequest) ProtoMessage() {}

func (x *BatchCreateShortLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateShortLinkRequest.ProtoReflect.Descriptor instead.
func (*BatchCreateShortLinkRequest) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{2}
}

func (x *BatchCreateShortLinkRequest) GetOriginUrls() []string {
	if x != nil {
		return x.OriginUrls
	}
	return nil
}

func (x *BatchCreateShortLinkRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *BatchCreateShortLinkRequest) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *BatchCreateShortLinkRequest) GetValidDateType() int32 {
	if x != nil {
		return x.ValidDateType
	}
	return 0
}

func (x *BatchCreateShortLinkRequest) GetValidDate() string {
	if x != nil {
		return x.ValidDate
	}
	return ""
}

func (x *BatchCreateShortLinkRequest) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

// 单个创建结果
type BatchCreateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullShortUrl string `protobuf:"bytes,1,opt,name=full_short_url,json=fullShortUrl,proto3" json:"full_short_url,omitempty"` // 完整短链接
	OriginUrl    string `protobuf:"bytes,2,opt,name=origin_url,json=originUrl,proto3" json:"origin_url,omitempty"`            // 原始链接
	Gid          string `protobuf:"bytes,3,opt,name=gid,proto3" json:"gid,omitempty"`                                         // 分组标识
}

func (x *BatchCreateResult) Reset() {
	*x = BatchCreateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateResult) ProtoMessage() {}

func (x *BatchCreateResult) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateResult.ProtoReflect.Descriptor instead.
func (*BatchCreateResult) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{3}
}

func (x *BatchCreateResult) GetFullShortUrl() string {
	if x != nil {
		return x.FullShortUrl
	}
	return ""
}

func (x *BatchCreateResult) GetOriginUrl() string {
	if x != nil {
		return x.OriginUrl
	}
	return ""
}

func (x *BatchCreateResult) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

// 批量创建短链接响应
type BatchCreateShortLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*BatchCreateResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"` // 创建结果列表
}

func (x *BatchCreateShortLinkResponse) Reset() {
	*x = BatchCreateShortLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateShortLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateShortLinkResponse) ProtoMessage() {}

func (x *BatchCreateShortLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateShortLinkResponse.ProtoReflect.Descriptor instead.
func (*BatchCreateShortLinkResponse) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{4}
}

func (x *BatchCreateShortLinkResponse) GetResults() []*BatchCreateResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// 修改短链接请求
type UpdateShortLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullShortUrl  string `protobuf:"bytes,1,opt,name=full_short_url,json=fullShortUrl,proto3" json:"full_short_url,omitempty"`     // 完整短链接
	OriginUrl     string `protobuf:"bytes,2,opt,name=origin_url,json=originUrl,proto3" json:"origin_url,omitempty"`                // 原始链接
	Gid           string `protobuf:"bytes,3,opt,name=gid,proto3" json:"gid,omitempty"`                                             // 分组标识
	ValidDateType int32  `protobuf:"varint,4,opt,name=valid_date_type,json=validDateType,proto3" json:"valid_date_type,omitempty"` // 有效期类型
	ValidDate     string `protobuf:"bytes,5,opt,name=valid_date,json=validDate,proto3" json:"valid_date,omitempty"`                // 有效期（ISO-8601格式）
	Describe      string `protobuf:"bytes,6,opt,name=describe,proto3" json:"describe,omitempty"`                                   // 描述
}

func (x *UpdateShortLinkRequest) Reset() {
	*x = UpdateShortLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateShortLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShortLinkRequest) ProtoMessage() {}

func (x *UpdateShortLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShortLinkRequest.ProtoReflect.Descriptor instead.
func (*UpdateShortLinkRequest) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateShortLinkRequest) GetFullShortUrl() string {
	if x != nil {
		return x.FullShortUrl
	}
	return ""
}

func (x *UpdateShortLinkRequest) GetOriginUrl() string {
	if x != nil {
		return x.OriginUrl
	}
	return ""
}

func (x *UpdateShortLinkRequest) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *UpdateShortLinkRequest) GetValidDateType() int32 {
	if x != nil {
		return x.ValidDateType
	}
	return 0
}

func (x *UpdateShortLinkRequest) GetValidDate() string {
	if x != nil {
		return x.ValidDate
	}
	return ""
}

func (x *UpdateShortLinkRequest) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

// 修改短链接响应（空结构体）
type UpdateShortLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateShortLinkResponse) Reset() {
	*x = UpdateShortLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateShortLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShortLinkResponse) ProtoMessage() {}

func (x *UpdateShortLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShortLinkResponse.ProtoReflect.Descriptor instead.
func (*UpdateShortLinkResponse) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{6}
}

// 分页查询短链接请求
type PageShortLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid     string `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"`          // 分组标识
	Current int32  `protobuf:"varint,2,opt,name=current,proto3" json:"current,omitempty"` // 当前页
	Size    int32  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`       // 每页大小
}

func (x *PageShortLinkRequest) Reset() {
	*x = PageShortLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageShortLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageShortLinkRequest) ProtoMessage() {}

func (x *PageShortLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageShortLinkRequest.ProtoReflect.Descriptor instead.
func (*PageShortLinkRequest) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{7}
}

func (x *PageShortLinkRequest) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *PageShortLinkRequest) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *PageShortLinkRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

// 短链接记录
type ShortLinkRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullShortUrl string `protobuf:"bytes,1,opt,name=full_short_url,json=fullShortUrl,proto3" json:"full_short_url,omitempty"` // 完整短链接
	OriginUrl    string `protobuf:"bytes,2,opt,name=origin_url,json=originUrl,proto3" json:"origin_url,omitempty"`            // 原始链接
	Domain       string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`                                   // 域名
	Gid          string `protobuf:"bytes,4,opt,name=gid,proto3" json:"gid,omitempty"`                                         // 分组标识
	CreateTime   string `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`         // 创建时间（ISO-8601格式）
	ValidDate    string `protobuf:"bytes,6,opt,name=valid_date,json=validDate,proto3" json:"valid_date,omitempty"`            // 有效期（ISO-8601格式）
	Describe     string `protobuf:"bytes,7,opt,name=describe,proto3" json:"describe,omitempty"`                               // 描述
	TotalPv      int32  `protobuf:"varint,8,opt,name=total_pv,json=totalPv,proto3" json:"total_pv,omitempty"`                 // 总访问量
	TotalUv      int32  `protobuf:"varint,9,opt,name=total_uv,json=totalUv,proto3" json:"total_uv,omitempty"`                 // 总独立访问量
	TotalUip     int32  `protobuf:"varint,10,opt,name=total_uip,json=totalUip,proto3" json:"total_uip,omitempty"`             // 总IP数
}

func (x *ShortLinkRecord) Reset() {
	*x = ShortLinkRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortLinkRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortLinkRecord) ProtoMessage() {}

func (x *ShortLinkRecord) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortLinkRecord.ProtoReflect.Descriptor instead.
func (*ShortLinkRecord) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{8}
}

func (x *ShortLinkRecord) GetFullShortUrl() string {
	if x != nil {
		return x.FullShortUrl
	}
	return ""
}

func (x *ShortLinkRecord) GetOriginUrl() string {
	if x != nil {
		return x.OriginUrl
	}
	return ""
}

func (x *ShortLinkRecord) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ShortLinkRecord) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *ShortLinkRecord) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ShortLinkRecord) GetValidDate() string {
	if x != nil {
		return x.ValidDate
	}
	return ""
}

func (x *ShortLinkRecord) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *ShortLinkRecord) GetTotalPv() int32 {
	if x != nil {
		return x.TotalPv
	}
	return 0
}

func (x *ShortLinkRecord) GetTotalUv() int32 {
	if x != nil {
		return x.TotalUv
	}
	return 0
}

func (x *ShortLinkRecord) GetTotalUip() int32 {
	if x != nil {
		return x.TotalUip
	}
	return 0
}

// 分页响应
type PageShortLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*ShortLinkRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`  // 短链接记录列表
	Total   int32              `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`     // 总记录数
	Size    int32              `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`       // 每页大小
	Current int32              `protobuf:"varint,4,opt,name=current,proto3" json:"current,omitempty"` // 当前页
}

func (x *PageShortLinkResponse) Reset() {
	*x = PageShortLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageShortLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageShortLinkResponse) ProtoMessage() {}

func (x *PageShortLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageShortLinkResponse.ProtoReflect.Descriptor instead.
func (*PageShortLinkResponse) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{9}
}

func (x *PageShortLinkResponse) GetRecords() []*ShortLinkRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *PageShortLinkResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PageShortLinkResponse) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PageShortLinkResponse) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

// 保存到回收站请求
type SaveToRecycleBinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid          string `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"`                                         // 分组标识
	FullShortUrl string `protobuf:"bytes,2,opt,name=full_short_url,json=fullShortUrl,proto3" json:"full_short_url,omitempty"` // 完整短链接
}

func (x *SaveToRecycleBinRequest) Reset() {
	*x = SaveToRecycleBinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveToRecycleBinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveToRecycleBinRequest) ProtoMessage() {}

func (x *SaveToRecycleBinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveToRecycleBinRequest.ProtoReflect.Descriptor instead.
func (*SaveToRecycleBinRequest) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{10}
}

func (x *SaveToRecycleBinRequest) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *SaveToRecycleBinRequest) GetFullShortUrl() string {
	if x != nil {
		return x.FullShortUrl
	}
	return ""
}

// 保存到回收站响应
type SaveToRecycleBinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 是否成功
}

func (x *SaveToRecycleBinResponse) Reset() {
	*x = SaveToRecycleBinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveToRecycleBinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveToRecycleBinResponse) ProtoMessage() {}

func (x *SaveToRecycleBinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveToRecycleBinResponse.ProtoReflect.Descriptor instead.
func (*SaveToRecycleBinResponse) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{11}
}

func (x *SaveToRecycleBinResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// 从回收站恢复请求
type RecoverFromRecycleBinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid          string `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"`                                         // 分组标识
	FullShortUrl string `protobuf:"bytes,2,opt,name=full_short_url,json=fullShortUrl,proto3" json:"full_short_url,omitempty"` // 完整短链接
}

func (x *RecoverFromRecycleBinRequest) Reset() {
	*x = RecoverFromRecycleBinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverFromRecycleBinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverFromRecycleBinRequest) ProtoMessage() {}

func (x *RecoverFromRecycleBinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverFromRecycleBinRequest.ProtoReflect.Descriptor instead.
func (*RecoverFromRecycleBinRequest) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{12}
}

func (x *RecoverFromRecycleBinRequest) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *RecoverFromRecycleBinRequest) GetFullShortUrl() string {
	if x != nil {
		return x.FullShortUrl
	}
	return ""
}

// 从回收站恢复响应
type RecoverFromRecycleBinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 是否成功
}

func (x *RecoverFromRecycleBinResponse) Reset() {
	*x = RecoverFromRecycleBinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverFromRecycleBinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverFromRecycleBinResponse) ProtoMessage() {}

func (x *RecoverFromRecycleBinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverFromRecycleBinResponse.ProtoReflect.Descriptor instead.
func (*RecoverFromRecycleBinResponse) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{13}
}

func (x *RecoverFromRecycleBinResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// 从回收站删除请求
type RemoveFromRecycleBinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid          string `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"`                                         // 分组标识
	FullShortUrl string `protobuf:"bytes,2,opt,name=full_short_url,json=fullShortUrl,proto3" json:"full_short_url,omitempty"` // 完整短链接
}

func (x *RemoveFromRecycleBinRequest) Reset() {
	*x = RemoveFromRecycleBinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFromRecycleBinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFromRecycleBinRequest) ProtoMessage() {}

func (x *RemoveFromRecycleBinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFromRecycleBinRequest.ProtoReflect.Descriptor instead.
func (*RemoveFromRecycleBinRequest) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{14}
}

func (x *RemoveFromRecycleBinRequest) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *RemoveFromRecycleBinRequest) GetFullShortUrl() string {
	if x != nil {
		return x.FullShortUrl
	}
	return ""
}

// 从回收站删除响应
type RemoveFromRecycleBinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 是否成功
}

func (x *RemoveFromRecycleBinResponse) Reset() {
	*x = RemoveFromRecycleBinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFromRecycleBinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFromRecycleBinResponse) ProtoMessage() {}

func (x *RemoveFromRecycleBinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFromRecycleBinResponse.ProtoReflect.Descriptor instead.
func (*RemoveFromRecycleBinResponse) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{15}
}

func (x *RemoveFromRecycleBinResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// 分页查询回收站短链接请求
type PageRecycleBinShortLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid     string `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"`          // 分组标识
	Current int32  `protobuf:"varint,2,opt,name=current,proto3" json:"current,omitempty"` // 当前页
	Size    int32  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`       // 每页大小
}

func (x *PageRecycleBinShortLinkRequest) Reset() {
	*x = PageRecycleBinShortLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageRecycleBinShortLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageRecycleBinShortLinkRequest) ProtoMessage() {}

func (x *PageRecycleBinShortLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageRecycleBinShortLinkRequest.ProtoReflect.Descriptor instead.
func (*PageRecycleBinShortLinkRequest) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{16}
}

func (x *PageRecycleBinShortLinkRequest) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *PageRecycleBinShortLinkRequest) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *PageRecycleBinShortLinkRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

// 分页查询回收站短链接响应
type PageRecycleBinShortLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*ShortLinkRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`  // 回收站短链接记录列表
	Total   int32              `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`     // 总记录数
	Size    int32              `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`       // 每页大小
	Current int32              `protobuf:"varint,4,opt,name=current,proto3" json:"current,omitempty"` // 当前页
}

func (x *PageRecycleBinShortLinkResponse) Reset() {
	*x = PageRecycleBinShortLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageRecycleBinShortLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageRecycleBinShortLinkResponse) ProtoMessage() {}

func (x *PageRecycleBinShortLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageRecycleBinShortLinkResponse.ProtoReflect.Descriptor instead.
func (*PageRecycleBinShortLinkResponse) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{17}
}

func (x *PageRecycleBinShortLinkResponse) GetRecords() []*ShortLinkRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *PageRecycleBinShortLinkResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PageRecycleBinShortLinkResponse) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PageRecycleBinShortLinkResponse) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

// 获取单个短链接统计数据请求
type GetSingleStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullShortUrl string `protobuf:"bytes,1,opt,name=full_short_url,json=fullShortUrl,proto3" json:"full_short_url,omitempty"` // 完整短链接
	Gid          string `protobuf:"bytes,2,opt,name=gid,proto3" json:"gid,omitempty"`                                         // 分组标识
	StartDate    string `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`            // 开始日期（ISO-8601格式）
	EndDate      string `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`                  // 结束日期（ISO-8601格式）
	EnableStatus int32  `protobuf:"varint,5,opt,name=enable_status,json=enableStatus,proto3" json:"enable_status,omitempty"`  // 启用状态 0：启用 1：未启用
}

func (x *GetSingleStatsRequest) Reset() {
	*x = GetSingleStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSingleStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSingleStatsRequest) ProtoMessage() {}

func (x *GetSingleStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSingleStatsRequest.ProtoReflect.Descriptor instead.
func (*GetSingleStatsRequest) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{18}
}

func (x *GetSingleStatsRequest) GetFullShortUrl() string {
	if x != nil {
		return x.FullShortUrl
	}
	return ""
}

func (x *GetSingleStatsRequest) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *GetSingleStatsRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *GetSingleStatsRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *GetSingleStatsRequest) GetEnableStatus() int32 {
	if x != nil {
		return x.EnableStatus
	}
	return 0
}

// 每日统计
type DailyStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"` // 日期
	Pv   int32  `protobuf:"varint,2,opt,name=pv,proto3" json:"pv,omitempty"`    // 访问量
	Uv   int32  `protobuf:"varint,3,opt,name=uv,proto3" json:"uv,omitempty"`    // 独立访问量
	Uip  int32  `protobuf:"varint,4,opt,name=uip,proto3" json:"uip,omitempty"`  // IP数
}

func (x *DailyStat) Reset() {
	*x = DailyStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyStat) ProtoMessage() {}

func (x *DailyStat) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyStat.ProtoReflect.Descriptor instead.
func (*DailyStat) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{19}
}

func (x *DailyStat) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *DailyStat) GetPv() int32 {
	if x != nil {
		return x.Pv
	}
	return 0
}

func (x *DailyStat) GetUv() int32 {
	if x != nil {
		return x.Uv
	}
	return 0
}

func (x *DailyStat) GetUip() int32 {
	if x != nil {
		return x.Uip
	}
	return 0
}

// 地域统计
type LocaleCnStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locale string `protobuf:"bytes,1,opt,name=locale,proto3" json:"locale,omitempty"` // 地区
	Cnt    int32  `protobuf:"varint,2,opt,name=cnt,proto3" json:"cnt,omitempty"`      // 数量
}

func (x *LocaleCnStat) Reset() {
	*x = LocaleCnStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocaleCnStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocaleCnStat) ProtoMessage() {}

func (x *LocaleCnStat) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocaleCnStat.ProtoReflect.Descriptor instead.
func (*LocaleCnStat) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{20}
}

func (x *LocaleCnStat) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *LocaleCnStat) GetCnt() int32 {
	if x != nil {
		return x.Cnt
	}
	return 0
}

// 浏览器统计
type BrowserStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Browser string `protobuf:"bytes,1,opt,name=browser,proto3" json:"browser,omitempty"` // 浏览器
	Cnt     int32  `protobuf:"varint,2,opt,name=cnt,proto3" json:"cnt,omitempty"`        // 数量
}

func (x *BrowserStat) Reset() {
	*x = BrowserStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowserStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowserStat) ProtoMessage() {}

func (x *BrowserStat) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowserStat.ProtoReflect.Descriptor instead.
func (*BrowserStat) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{21}
}

func (x *BrowserStat) GetBrowser() string {
	if x != nil {
		return x.Browser
	}
	return ""
}

func (x *BrowserStat) GetCnt() int32 {
	if x != nil {
		return x.Cnt
	}
	return 0
}

// 操作系统统计
type OSStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Os  string `protobuf:"bytes,1,opt,name=os,proto3" json:"os,omitempty"`    // 操作系统
	Cnt int32  `protobuf:"varint,2,opt,name=cnt,proto3" json:"cnt,omitempty"` // 数量
}

func (x *OSStat) Reset() {
	*x = OSStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSStat) ProtoMessage() {}

func (x *OSStat) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSStat.ProtoReflect.Descriptor instead.
func (*OSStat) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{22}
}

func (x *OSStat) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *OSStat) GetCnt() int32 {
	if x != nil {
		return x.Cnt
	}
	return 0
}

// 设备统计
type DeviceStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"` // 设备
	Cnt    int32  `protobuf:"varint,2,opt,name=cnt,proto3" json:"cnt,omitempty"`      // 数量
}

func (x *DeviceStat) Reset() {
	*x = DeviceStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStat) ProtoMessage() {}

func (x *DeviceStat) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStat.ProtoReflect.Descriptor instead.
func (*DeviceStat) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{23}
}

func (x *DeviceStat) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *DeviceStat) GetCnt() int32 {
	if x != nil {
		return x.Cnt
	}
	return 0
}

// 网络统计
type NetworkStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"` // 网络类型
	Cnt     int32  `protobuf:"varint,2,opt,name=cnt,proto3" json:"cnt,omitempty"`        // 数量
}

func (x *NetworkStat) Reset() {
	*x = NetworkStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkStat) ProtoMessage() {}

func (x *NetworkStat) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkStat.ProtoReflect.Descriptor instead.
func (*NetworkStat) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{24}
}

func (x *NetworkStat) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *NetworkStat) GetCnt() int32 {
	if x != nil {
		return x.Cnt
	}
	return 0
}

// 获取单个短链接统计数据响应
type GetSingleStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pv            int32           `protobuf:"varint,1,opt,name=pv,proto3" json:"pv,omitempty"`                                             // 访问量
	Uv            int32           `protobuf:"varint,2,opt,name=uv,proto3" json:"uv,omitempty"`                                             // 独立访问量
	Uip           int32           `protobuf:"varint,3,opt,name=uip,proto3" json:"uip,omitempty"`                                           // IP数
	Daily         []*DailyStat    `protobuf:"bytes,4,rep,name=daily,proto3" json:"daily,omitempty"`                                        // 每日统计
	LocaleCnStats []*LocaleCnStat `protobuf:"bytes,5,rep,name=locale_cn_stats,json=localeCnStats,proto3" json:"locale_cn_stats,omitempty"` // 地域统计
	BrowserStats  []*BrowserStat  `protobuf:"bytes,6,rep,name=browser_stats,json=browserStats,proto3" json:"browser_stats,omitempty"`      // 浏览器统计
	OsStats       []*OSStat       `protobuf:"bytes,7,rep,name=os_stats,json=osStats,proto3" json:"os_stats,omitempty"`                     // 操作系统统计
	DeviceStats   []*DeviceStat   `protobuf:"bytes,8,rep,name=device_stats,json=deviceStats,proto3" json:"device_stats,omitempty"`         // 设备统计
	NetworkStats  []*NetworkStat  `protobuf:"bytes,9,rep,name=network_stats,json=networkStats,proto3" json:"network_stats,omitempty"`      // 网络统计
}

func (x *GetSingleStatsResponse) Reset() {
	*x = GetSingleStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSingleStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSingleStatsResponse) ProtoMessage() {}

func (x *GetSingleStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSingleStatsResponse.ProtoReflect.Descriptor instead.
func (*GetSingleStatsResponse) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{25}
}

func (x *GetSingleStatsResponse) GetPv() int32 {
	if x != nil {
		return x.Pv
	}
	return 0
}

func (x *GetSingleStatsResponse) GetUv() int32 {
	if x != nil {
		return x.Uv
	}
	return 0
}

func (x *GetSingleStatsResponse) GetUip() int32 {
	if x != nil {
		return x.Uip
	}
	return 0
}

func (x *GetSingleStatsResponse) GetDaily() []*DailyStat {
	if x != nil {
		return x.Daily
	}
	return nil
}

func (x *GetSingleStatsResponse) GetLocaleCnStats() []*LocaleCnStat {
	if x != nil {
		return x.LocaleCnStats
	}
	return nil
}

func (x *GetSingleStatsResponse) GetBrowserStats() []*BrowserStat {
	if x != nil {
		return x.BrowserStats
	}
	return nil
}

func (x *GetSingleStatsResponse) GetOsStats() []*OSStat {
	if x != nil {
		return x.OsStats
	}
	return nil
}

func (x *GetSingleStatsResponse) GetDeviceStats() []*DeviceStat {
	if x != nil {
		return x.DeviceStats
	}
	return nil
}

func (x *GetSingleStatsResponse) GetNetworkStats() []*NetworkStat {
	if x != nil {
		return x.NetworkStats
	}
	return nil
}

// 获取分组短链接统计数据请求
type GetGroupStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid       string `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"`                              // 分组标识
	StartDate string `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"` // 开始日期（ISO-8601格式）
	EndDate   string `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`       // 结束日期（ISO-8601格式）
}

func (x *GetGroupStatsRequest) Reset() {
	*x = GetGroupStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupStatsRequest) ProtoMessage() {}

func (x *GetGroupStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupStatsRequest.ProtoReflect.Descriptor instead.
func (*GetGroupStatsRequest) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{26}
}

func (x *GetGroupStatsRequest) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *GetGroupStatsRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *GetGroupStatsRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

// 获取分组短链接统计数据响应
type GetGroupStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pv            int32           `protobuf:"varint,1,opt,name=pv,proto3" json:"pv,omitempty"`                                             // 访问量
	Uv            int32           `protobuf:"varint,2,opt,name=uv,proto3" json:"uv,omitempty"`                                             // 独立访问量
	Uip           int32           `protobuf:"varint,3,opt,name=uip,proto3" json:"uip,omitempty"`                                           // IP数
	Daily         []*DailyStat    `protobuf:"bytes,4,rep,name=daily,proto3" json:"daily,omitempty"`                                        // 每日统计
	LocaleCnStats []*LocaleCnStat `protobuf:"bytes,5,rep,name=locale_cn_stats,json=localeCnStats,proto3" json:"locale_cn_stats,omitempty"` // 地域统计
	BrowserStats  []*BrowserStat  `protobuf:"bytes,6,rep,name=browser_stats,json=browserStats,proto3" json:"browser_stats,omitempty"`      // 浏览器统计
	OsStats       []*OSStat       `protobuf:"bytes,7,rep,name=os_stats,json=osStats,proto3" json:"os_stats,omitempty"`                     // 操作系统统计
	DeviceStats   []*DeviceStat   `protobuf:"bytes,8,rep,name=device_stats,json=deviceStats,proto3" json:"device_stats,omitempty"`         // 设备统计
	NetworkStats  []*NetworkStat  `protobuf:"bytes,9,rep,name=network_stats,json=networkStats,proto3" json:"network_stats,omitempty"`      // 网络统计
}

func (x *GetGroupStatsResponse) Reset() {
	*x = GetGroupStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupStatsResponse) ProtoMessage() {}

func (x *GetGroupStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupStatsResponse.ProtoReflect.Descriptor instead.
func (*GetGroupStatsResponse) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{27}
}

func (x *GetGroupStatsResponse) GetPv() int32 {
	if x != nil {
		return x.Pv
	}
	return 0
}

func (x *GetGroupStatsResponse) GetUv() int32 {
	if x != nil {
		return x.Uv
	}
	return 0
}

func (x *GetGroupStatsResponse) GetUip() int32 {
	if x != nil {
		return x.Uip
	}
	return 0
}

func (x *GetGroupStatsResponse) GetDaily() []*DailyStat {
	if x != nil {
		return x.Daily
	}
	return nil
}

func (x *GetGroupStatsResponse) GetLocaleCnStats() []*LocaleCnStat {
	if x != nil {
		return x.LocaleCnStats
	}
	return nil
}

func (x *GetGroupStatsResponse) GetBrowserStats() []*BrowserStat {
	if x != nil {
		return x.BrowserStats
	}
	return nil
}

func (x *GetGroupStatsResponse) GetOsStats() []*OSStat {
	if x != nil {
		return x.OsStats
	}
	return nil
}

func (x *GetGroupStatsResponse) GetDeviceStats() []*DeviceStat {
	if x != nil {
		return x.DeviceStats
	}
	return nil
}

func (x *GetGroupStatsResponse) GetNetworkStats() []*NetworkStat {
	if x != nil {
		return x.NetworkStats
	}
	return nil
}

// 短链接分组内数量查询请求
type GetShortLinkCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestParam []string `protobuf:"bytes,1,rep,name=request_param,json=requestParam,proto3" json:"request_param,omitempty"` // 分组标识列表
}

func (x *GetShortLinkCountRequest) Reset() {
	*x = GetShortLinkCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShortLinkCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShortLinkCountRequest) ProtoMessage() {}

func (x *GetShortLinkCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShortLinkCountRequest.ProtoReflect.Descriptor instead.
func (*GetShortLinkCountRequest) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{28}
}

func (x *GetShortLinkCountRequest) GetRequestParam() []string {
	if x != nil {
		return x.RequestParam
	}
	return nil
}

// 单个分组数量结果
type GroupCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid            string `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"`                                                // 分组标识
	ShortLinkCount int32  `protobuf:"varint,2,opt,name=short_link_count,json=shortLinkCount,proto3" json:"short_link_count,omitempty"` // 短链接数量
}

func (x *GroupCount) Reset() {
	*x = GroupCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupCount) ProtoMessage() {}

func (x *GroupCount) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupCount.ProtoReflect.Descriptor instead.
func (*GroupCount) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{29}
}

func (x *GroupCount) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *GroupCount) GetShortLinkCount() int32 {
	if x != nil {
		return x.ShortLinkCount
	}
	return 0
}

// 查询短链接分组内数量响应
type GetShortLinkCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupCounts []*GroupCount `protobuf:"bytes,1,rep,name=group_counts,json=groupCounts,proto3" json:"group_counts,omitempty"` // 分组数量列表
}

func (x *GetShortLinkCountResponse) Reset() {
	*x = GetShortLinkCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShortLinkCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShortLinkCountResponse) ProtoMessage() {}

func (x *GetShortLinkCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShortLinkCountResponse.ProtoReflect.Descriptor instead.
func (*GetShortLinkCountResponse) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{30}
}

func (x *GetShortLinkCountResponse) GetGroupCounts() []*GroupCount {
	if x != nil {
		return x.GroupCounts
	}
	return nil
}

// 访问记录
type AccessRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip         string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`                                   // 访问IP
	Browser    string `protobuf:"bytes,2,opt,name=browser,proto3" json:"browser,omitempty"`                         // 浏览器
	Os         string `protobuf:"bytes,3,opt,name=os,proto3" json:"os,omitempty"`                                   // 操作系统
	Network    string `protobuf:"bytes,4,opt,name=network,proto3" json:"network,omitempty"`                         // 网络环境
	Device     string `protobuf:"bytes,5,opt,name=device,proto3" json:"device,omitempty"`                           // 访问设备
	Locale     string `protobuf:"bytes,6,opt,name=locale,proto3" json:"locale,omitempty"`                           // 地区
	User       string `protobuf:"bytes,7,opt,name=user,proto3" json:"user,omitempty"`                               // 用户标识
	CreateTime string `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` // 访问时间（ISO-8601格式）
}

func (x *AccessRecord) Reset() {
	*x = AccessRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRecord) ProtoMessage() {}

func (x *AccessRecord) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRecord.ProtoReflect.Descriptor instead.
func (*AccessRecord) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{31}
}

func (x *AccessRecord) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AccessRecord) GetBrowser() string {
	if x != nil {
		return x.Browser
	}
	return ""
}

func (x *AccessRecord) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *AccessRecord) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *AccessRecord) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *AccessRecord) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *AccessRecord) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *AccessRecord) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

// 访问记录查询请求
type AccessRecordQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullShortUrl string `protobuf:"bytes,1,opt,name=full_short_url,json=fullShortUrl,proto3" json:"full_short_url,omitempty"` // 完整短链接
	Gid          string `protobuf:"bytes,2,opt,name=gid,proto3" json:"gid,omitempty"`                                         // 分组标识
	StartDate    string `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`            // 开始日期（ISO-8601格式）
	EndDate      string `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`                  // 结束日期（ISO-8601格式）
	Current      int32  `protobuf:"varint,5,opt,name=current,proto3" json:"current,omitempty"`                                // 当前页
	Size         int32  `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`                                      // 每页大小
}

func (x *AccessRecordQueryRequest) Reset() {
	*x = AccessRecordQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessRecordQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRecordQueryRequest) ProtoMessage() {}

func (x *AccessRecordQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRecordQueryRequest.ProtoReflect.Descriptor instead.
func (*AccessRecordQueryRequest) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{32}
}

func (x *AccessRecordQueryRequest) GetFullShortUrl() string {
	if x != nil {
		return x.FullShortUrl
	}
	return ""
}

func (x *AccessRecordQueryRequest) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *AccessRecordQueryRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *AccessRecordQueryRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *AccessRecordQueryRequest) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *AccessRecordQueryRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

// 访问记录查询响应
type AccessRecordQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*AccessRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`  // 访问记录列表
	Total   int32           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`     // 总记录数
	Size    int32           `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`       // 每页大小
	Current int32           `protobuf:"varint,4,opt,name=current,proto3" json:"current,omitempty"` // 当前页
}

func (x *AccessRecordQueryResponse) Reset() {
	*x = AccessRecordQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessRecordQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRecordQueryResponse) ProtoMessage() {}

func (x *AccessRecordQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRecordQueryResponse.ProtoReflect.Descriptor instead.
func (*AccessRecordQueryResponse) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{33}
}

func (x *AccessRecordQueryResponse) GetRecords() []*AccessRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *AccessRecordQueryResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AccessRecordQueryResponse) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AccessRecordQueryResponse) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

// 分组访问记录查询请求
type GroupAccessRecordQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid       string `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"`                              // 分组标识
	StartDate string `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"` // 开始日期（ISO-8601格式）
	EndDate   string `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`       // 结束日期（ISO-8601格式）
	Current   int32  `protobuf:"varint,4,opt,name=current,proto3" json:"current,omitempty"`                     // 当前页
	Size      int32  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`                           // 每页大小
}

func (x *GroupAccessRecordQueryRequest) Reset() {
	*x = GroupAccessRecordQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupAccessRecordQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupAccessRecordQueryRequest) ProtoMessage() {}

func (x *GroupAccessRecordQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupAccessRecordQueryRequest.ProtoReflect.Descriptor instead.
func (*GroupAccessRecordQueryRequest) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{34}
}

func (x *GroupAccessRecordQueryRequest) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *GroupAccessRecordQueryRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *GroupAccessRecordQueryRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *GroupAccessRecordQueryRequest) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *GroupAccessRecordQueryRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

// 分组访问记录查询响应
type GroupAccessRecordQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*AccessRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`  // 访问记录列表
	Total   int32           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`     // 总记录数
	Size    int32           `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`       // 每页大小
	Current int32           `protobuf:"varint,4,opt,name=current,proto3" json:"current,omitempty"` // 当前页
}

func (x *GroupAccessRecordQueryResponse) Reset() {
	*x = GroupAccessRecordQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupAccessRecordQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupAccessRecordQueryResponse) ProtoMessage() {}

func (x *GroupAccessRecordQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupAccessRecordQueryResponse.ProtoReflect.Descriptor instead.
func (*GroupAccessRecordQueryResponse) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{35}
}

func (x *GroupAccessRecordQueryResponse) GetRecords() []*AccessRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *GroupAccessRecordQueryResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GroupAccessRecordQueryResponse) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GroupAccessRecordQueryResponse) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

// 获取URL标题请求
type GetUrlTitleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"` // 目标URL
}

func (x *GetUrlTitleRequest) Reset() {
	*x = GetUrlTitleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUrlTitleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUrlTitleRequest) ProtoMessage() {}

func (x *GetUrlTitleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUrlTitleRequest.ProtoReflect.Descriptor instead.
func (*GetUrlTitleRequest) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{36}
}

func (x *GetUrlTitleRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// 获取URL标题响应
type GetUrlTitleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"` // URL标题
}

func (x *GetUrlTitleResponse) Reset() {
	*x = GetUrlTitleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUrlTitleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUrlTitleResponse) ProtoMessage() {}

func (x *GetUrlTitleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUrlTitleResponse.ProtoReflect.Descriptor instead.
func (*GetUrlTitleResponse) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{37}
}

func (x *GetUrlTitleResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

var File_link_proto protoreflect.FileDescriptor

var file_link_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0xe7, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x70, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x55,
	0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x55, 0x72,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x67, 0x69, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x75, 0x72,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x55, 0x72, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x22, 0x6a, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x75, 0x6c, 0x6c, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x67,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x22, 0x56, 0x0a,
	0x1c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x0a, 0x14, 0x50, 0x61, 0x67, 0x65, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xaf, 0x02,
	0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x76, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x76, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x75, 0x76, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x55, 0x76, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x69, 0x70, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x69, 0x70, 0x22,
	0x91, 0x01, 0x0a, 0x15, 0x50, 0x61, 0x67, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x22, 0x51, 0x0a, 0x17, 0x53, 0x61, 0x76, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x22, 0x34, 0x0a, 0x18, 0x53, 0x61, 0x76, 0x65, 0x54, 0x6f,
	0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x56, 0x0a, 0x1c,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x55, 0x72, 0x6c, 0x22, 0x39, 0x0a, 0x1d, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x46,
	0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x55, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x22, 0x38, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0x60, 0x0a, 0x1e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x42,
	0x69, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x67, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x1f, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x42, 0x69, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x22, 0xae, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x51, 0x0a, 0x09, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x70, 0x76, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x75, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x75, 0x69, 0x70, 0x22, 0x38, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x6e, 0x74, 0x22, 0x39,
	0x0a, 0x0b, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x6e, 0x74, 0x22, 0x2a, 0x0a, 0x06, 0x4f, 0x53, 0x53,
	0x74, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x63, 0x6e, 0x74, 0x22, 0x36, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x6e, 0x74, 0x22, 0x39, 0x0a,
	0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x6e, 0x74, 0x22, 0x99, 0x03, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x70, 0x76, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x75, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x75, 0x69, 0x70, 0x12, 0x2a, 0x0a, 0x05, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x12, 0x3f, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x63, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x52, 0x0c, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x2c, 0x0a, 0x08, 0x6f, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x4f, 0x53,
	0x53, 0x74, 0x61, 0x74, 0x52, 0x07, 0x6f, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x38, 0x0a,
	0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x22, 0x62, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x98, 0x03, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x70, 0x76, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x75, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x75, 0x69, 0x70, 0x12, 0x2a, 0x0a, 0x05, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x12, 0x3f, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x63, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x52, 0x0c, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2c,
	0x0a, 0x08, 0x6f, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x4f, 0x53, 0x53,
	0x74, 0x61, 0x74, 0x52, 0x07, 0x6f, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0c,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x22, 0x3f, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x22, 0x48, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x67, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x55,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xba, 0x01, 0x0a, 0x18, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x55,
	0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x67, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x92, 0x01, 0x0a,
	0x19, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x22, 0x99, 0x01, 0x0a, 0x1d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x97, 0x01,
	0x0a, 0x1e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x26, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x72,
	0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22,
	0x2b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x32, 0xcb, 0x0a, 0x0a,
	0x10, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x58, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x14, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52,
	0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x1f, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x42, 0x69, 0x6e,
	0x53, 0x61, 0x76, 0x65, 0x12, 0x22, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x53, 0x61, 0x76, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x42, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a,
	0x11, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x12, 0x27, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x42, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x46,
	0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x42, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x26, 0x2e, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x42,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x0e, 0x52, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x12, 0x29, 0x2e, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x42,
	0x69, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x47, 0x65, 0x74, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e,
	0x6b, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x2e, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63,
	0x0a, 0x16, 0x53, 0x74, 0x61, 0x74, 0x73, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x74, 0x73, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x23, 0x2e,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x1b, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x28, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0b,
	0x55, 0x72, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_link_proto_rawDescOnce sync.Once
	file_link_proto_rawDescData = file_link_proto_rawDesc
)

func file_link_proto_rawDescGZIP() []byte {
	file_link_proto_rawDescOnce.Do(func() {
		file_link_proto_rawDescData = protoimpl.X.CompressGZIP(file_link_proto_rawDescData)
	})
	return file_link_proto_rawDescData
}

var file_link_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_link_proto_goTypes = []any{
	(*CreateShortLinkRequest)(nil),          // 0: shortlink.CreateShortLinkRequest
	(*CreateShortLinkResponse)(nil),         // 1: shortlink.CreateShortLinkResponse
	(*BatchCreateShortLinkRequest)(nil),     // 2: shortlink.BatchCreateShortLinkRequest
	(*BatchCreateResult)(nil),               // 3: shortlink.BatchCreateResult
	(*BatchCreateShortLinkResponse)(nil),    // 4: shortlink.BatchCreateShortLinkResponse
	(*UpdateShortLinkRequest)(nil),          // 5: shortlink.UpdateShortLinkRequest
	(*UpdateShortLinkResponse)(nil),         // 6: shortlink.UpdateShortLinkResponse
	(*PageShortLinkRequest)(nil),            // 7: shortlink.PageShortLinkRequest
	(*ShortLinkRecord)(nil),                 // 8: shortlink.ShortLinkRecord
	(*PageShortLinkResponse)(nil),           // 9: shortlink.PageShortLinkResponse
	(*SaveToRecycleBinRequest)(nil),         // 10: shortlink.SaveToRecycleBinRequest
	(*SaveToRecycleBinResponse)(nil),        // 11: shortlink.SaveToRecycleBinResponse
	(*RecoverFromRecycleBinRequest)(nil),    // 12: shortlink.RecoverFromRecycleBinRequest
	(*RecoverFromRecycleBinResponse)(nil),   // 13: shortlink.RecoverFromRecycleBinResponse
	(*RemoveFromRecycleBinRequest)(nil),     // 14: shortlink.RemoveFromRecycleBinRequest
	(*RemoveFromRecycleBinResponse)(nil),    // 15: shortlink.RemoveFromRecycleBinResponse
	(*PageRecycleBinShortLinkRequest)(nil),  // 16: shortlink.PageRecycleBinShortLinkRequest
	(*PageRecycleBinShortLinkResponse)(nil), // 17: shortlink.PageRecycleBinShortLinkResponse
	(*GetSingleStatsRequest)(nil),           // 18: shortlink.GetSingleStatsRequest
	(*DailyStat)(nil),                       // 19: shortlink.DailyStat
	(*LocaleCnStat)(nil),                    // 20: shortlink.LocaleCnStat
	(*BrowserStat)(nil),                     // 21: shortlink.BrowserStat
	(*OSStat)(nil),                          // 22: shortlink.OSStat
	(*DeviceStat)(nil),                      // 23: shortlink.DeviceStat
	(*NetworkStat)(nil),                     // 24: shortlink.NetworkStat
	(*GetSingleStatsResponse)(nil),          // 25: shortlink.GetSingleStatsResponse
	(*GetGroupStatsRequest)(nil),            // 26: shortlink.GetGroupStatsRequest
	(*GetGroupStatsResponse)(nil),           // 27: shortlink.GetGroupStatsResponse
	(*GetShortLinkCountRequest)(nil),        // 28: shortlink.GetShortLinkCountRequest
	(*GroupCount)(nil),                      // 29: shortlink.GroupCount
	(*GetShortLinkCountResponse)(nil),       // 30: shortlink.GetShortLinkCountResponse
	(*AccessRecord)(nil),                    // 31: shortlink.AccessRecord
	(*AccessRecordQueryRequest)(nil),        // 32: shortlink.AccessRecordQueryRequest
	(*AccessRecordQueryResponse)(nil),       // 33: shortlink.AccessRecordQueryResponse
	(*GroupAccessRecordQueryRequest)(nil),   // 34: shortlink.GroupAccessRecordQueryRequest
	(*GroupAccessRecordQueryResponse)(nil),  // 35: shortlink.GroupAccessRecordQueryResponse
	(*GetUrlTitleRequest)(nil),              // 36: shortlink.GetUrlTitleRequest
	(*GetUrlTitleResponse)(nil),             // 37: shortlink.GetUrlTitleResponse
}
var file_link_proto_depIdxs = []int32{
	3,  // 0: shortlink.BatchCreateShortLinkResponse.results:type_name -> shortlink.BatchCreateResult
	8,  // 1: shortlink.PageShortLinkResponse.records:type_name -> shortlink.ShortLinkRecord
	8,  // 2: shortlink.PageRecycleBinShortLinkResponse.records:type_name -> shortlink.ShortLinkRecord
	19, // 3: shortlink.GetSingleStatsResponse.daily:type_name -> shortlink.DailyStat
	20, // 4: shortlink.GetSingleStatsResponse.locale_cn_stats:type_name -> shortlink.LocaleCnStat
	21, // 5: shortlink.GetSingleStatsResponse.browser_stats:type_name -> shortlink.BrowserStat
	22, // 6: shortlink.GetSingleStatsResponse.os_stats:type_name -> shortlink.OSStat
	23, // 7: shortlink.GetSingleStatsResponse.device_stats:type_name -> shortlink.DeviceStat
	24, // 8: shortlink.GetSingleStatsResponse.network_stats:type_name -> shortlink.NetworkStat
	19, // 9: shortlink.GetGroupStatsResponse.daily:type_name -> shortlink.DailyStat
	20, // 10: shortlink.GetGroupStatsResponse.locale_cn_stats:type_name -> shortlink.LocaleCnStat
	21, // 11: shortlink.GetGroupStatsResponse.browser_stats:type_name -> shortlink.BrowserStat
	22, // 12: shortlink.GetGroupStatsResponse.os_stats:type_name -> shortlink.OSStat
	23, // 13: shortlink.GetGroupStatsResponse.device_stats:type_name -> shortlink.DeviceStat
	24, // 14: shortlink.GetGroupStatsResponse.network_stats:type_name -> shortlink.NetworkStat
	29, // 15: shortlink.GetShortLinkCountResponse.group_counts:type_name -> shortlink.GroupCount
	31, // 16: shortlink.AccessRecordQueryResponse.records:type_name -> shortlink.AccessRecord
	31, // 17: shortlink.GroupAccessRecordQueryResponse.records:type_name -> shortlink.AccessRecord
	0,  // 18: shortlink.ShortLinkService.ShortLinkCreate:input_type -> shortlink.CreateShortLinkRequest
	2,  // 19: shortlink.ShortLinkService.ShortLinkBatchCreate:input_type -> shortlink.BatchCreateShortLinkRequest
	5,  // 20: shortlink.ShortLinkService.ShortLinkUpdate:input_type -> shortlink.UpdateShortLinkRequest
	7,  // 21: shortlink.ShortLinkService.ShortLinkPage:input_type -> shortlink.PageShortLinkRequest
	10, // 22: shortlink.ShortLinkService.RecycleBinSave:input_type -> shortlink.SaveToRecycleBinRequest
	12, // 23: shortlink.ShortLinkService.RecycleBinRecover:input_type -> shortlink.RecoverFromRecycleBinRequest
	14, // 24: shortlink.ShortLinkService.RecycleBinRemove:input_type -> shortlink.RemoveFromRecycleBinRequest
	16, // 25: shortlink.ShortLinkService.RecycleBinPage:input_type -> shortlink.PageRecycleBinShortLinkRequest
	18, // 26: shortlink.ShortLinkService.StatsGetSingle:input_type -> shortlink.GetSingleStatsRequest
	26, // 27: shortlink.ShortLinkService.StatsGetGroup:input_type -> shortlink.GetGroupStatsRequest
	28, // 28: shortlink.ShortLinkService.StatsGetShortLinkCount:input_type -> shortlink.GetShortLinkCountRequest
	32, // 29: shortlink.ShortLinkService.StatsAccessRecordQuery:input_type -> shortlink.AccessRecordQueryRequest
	34, // 30: shortlink.ShortLinkService.StatsGroupAccessRecordQuery:input_type -> shortlink.GroupAccessRecordQueryRequest
	36, // 31: shortlink.ShortLinkService.UrlTitleGet:input_type -> shortlink.GetUrlTitleRequest
	1,  // 32: shortlink.ShortLinkService.ShortLinkCreate:output_type -> shortlink.CreateShortLinkResponse
	4,  // 33: shortlink.ShortLinkService.ShortLinkBatchCreate:output_type -> shortlink.BatchCreateShortLinkResponse
	6,  // 34: shortlink.ShortLinkService.ShortLinkUpdate:output_type -> shortlink.UpdateShortLinkResponse
	9,  // 35: shortlink.ShortLinkService.ShortLinkPage:output_type -> shortlink.PageShortLinkResponse
	11, // 36: shortlink.ShortLinkService.RecycleBinSave:output_type -> shortlink.SaveToRecycleBinResponse
	13, // 37: shortlink.ShortLinkService.RecycleBinRecover:output_type -> shortlink.RecoverFromRecycleBinResponse
	15, // 38: shortlink.ShortLinkService.RecycleBinRemove:output_type -> shortlink.RemoveFromRecycleBinResponse
	17, // 39: shortlink.ShortLinkService.RecycleBinPage:output_type -> shortlink.PageRecycleBinShortLinkResponse
	25, // 40: shortlink.ShortLinkService.StatsGetSingle:output_type -> shortlink.GetSingleStatsResponse
	27, // 41: shortlink.ShortLinkService.StatsGetGroup:output_type -> shortlink.GetGroupStatsResponse
	30, // 42: shortlink.ShortLinkService.StatsGetShortLinkCount:output_type -> shortlink.GetShortLinkCountResponse
	33, // 43: shortlink.ShortLinkService.StatsAccessRecordQuery:output_type -> shortlink.AccessRecordQueryResponse
	35, // 44: shortlink.ShortLinkService.StatsGroupAccessRecordQuery:output_type -> shortlink.GroupAccessRecordQueryResponse
	37, // 45: shortlink.ShortLinkService.UrlTitleGet:output_type -> shortlink.GetUrlTitleResponse
	32, // [32:46] is the sub-list for method output_type
	18, // [18:32] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_link_proto_init() }
func file_link_proto_init() {
	if File_link_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_link_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CreateShortLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CreateShortLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*BatchCreateShortLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*BatchCreateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*BatchCreateShortLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateShortLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateShortLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PageShortLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ShortLinkRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*PageShortLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SaveToRecycleBinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*SaveToRecycleBinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*RecoverFromRecycleBinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*RecoverFromRecycleBinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveFromRecycleBinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveFromRecycleBinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*PageRecycleBinShortLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*PageRecycleBinShortLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*GetSingleStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*DailyStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*LocaleCnStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*BrowserStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*OSStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*GetSingleStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*GetGroupStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*GetGroupStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*GetShortLinkCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*GroupCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*GetShortLinkCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*AccessRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*AccessRecordQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*AccessRecordQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*GroupAccessRecordQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*GroupAccessRecordQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*GetUrlTitleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*GetUrlTitleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_link_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_link_proto_goTypes,
		DependencyIndexes: file_link_proto_depIdxs,
		MessageInfos:      file_link_proto_msgTypes,
	}.Build()
	File_link_proto = out.File
	file_link_proto_rawDesc = nil
	file_link_proto_goTypes = nil
	file_link_proto_depIdxs = nil
}
