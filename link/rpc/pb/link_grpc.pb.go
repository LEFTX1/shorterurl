// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: link.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShortLinkService_ShortLinkCreate_FullMethodName             = "/shortlink.ShortLinkService/ShortLinkCreate"
	ShortLinkService_ShortLinkBatchCreate_FullMethodName        = "/shortlink.ShortLinkService/ShortLinkBatchCreate"
	ShortLinkService_ShortLinkUpdate_FullMethodName             = "/shortlink.ShortLinkService/ShortLinkUpdate"
	ShortLinkService_ShortLinkPage_FullMethodName               = "/shortlink.ShortLinkService/ShortLinkPage"
	ShortLinkService_ShortLinkListGroupCount_FullMethodName     = "/shortlink.ShortLinkService/ShortLinkListGroupCount"
	ShortLinkService_RestoreUrl_FullMethodName                  = "/shortlink.ShortLinkService/RestoreUrl"
	ShortLinkService_ShortLinkStats_FullMethodName              = "/shortlink.ShortLinkService/ShortLinkStats"
	ShortLinkService_RecycleBinSave_FullMethodName              = "/shortlink.ShortLinkService/RecycleBinSave"
	ShortLinkService_RecycleBinRecover_FullMethodName           = "/shortlink.ShortLinkService/RecycleBinRecover"
	ShortLinkService_RecycleBinRemove_FullMethodName            = "/shortlink.ShortLinkService/RecycleBinRemove"
	ShortLinkService_RecycleBinPage_FullMethodName              = "/shortlink.ShortLinkService/RecycleBinPage"
	ShortLinkService_StatsGetSingle_FullMethodName              = "/shortlink.ShortLinkService/StatsGetSingle"
	ShortLinkService_StatsGetGroup_FullMethodName               = "/shortlink.ShortLinkService/StatsGetGroup"
	ShortLinkService_StatsAccessRecordQuery_FullMethodName      = "/shortlink.ShortLinkService/StatsAccessRecordQuery"
	ShortLinkService_StatsGroupAccessRecordQuery_FullMethodName = "/shortlink.ShortLinkService/StatsGroupAccessRecordQuery"
	ShortLinkService_UrlTitleGet_FullMethodName                 = "/shortlink.ShortLinkService/UrlTitleGet"
	ShortLinkService_GetIpLocation_FullMethodName               = "/shortlink.ShortLinkService/GetIpLocation"
)

// ShortLinkServiceClient is the client API for ShortLinkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// --------------------- 服务定义 ---------------------
type ShortLinkServiceClient interface {
	// --------------------- 短链接管理接口 ---------------------
	ShortLinkCreate(ctx context.Context, in *CreateShortLinkRequest, opts ...grpc.CallOption) (*CreateShortLinkResponse, error)
	ShortLinkBatchCreate(ctx context.Context, in *BatchCreateShortLinkRequest, opts ...grpc.CallOption) (*BatchCreateShortLinkResponse, error)
	ShortLinkUpdate(ctx context.Context, in *UpdateShortLinkRequest, opts ...grpc.CallOption) (*UpdateShortLinkResponse, error)
	ShortLinkPage(ctx context.Context, in *PageShortLinkRequest, opts ...grpc.CallOption) (*PageShortLinkResponse, error)
	// 查询短链接分组内数量
	ShortLinkListGroupCount(ctx context.Context, in *GroupShortLinkCountRequest, opts ...grpc.CallOption) (*GroupShortLinkCountResponse, error)
	// 短链接跳转
	RestoreUrl(ctx context.Context, in *RestoreUrlRequest, opts ...grpc.CallOption) (*RestoreUrlResponse, error)
	// 短链接统计
	ShortLinkStats(ctx context.Context, in *ShortLinkStatsRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// --------------------- 回收站管理接口 ---------------------
	RecycleBinSave(ctx context.Context, in *SaveToRecycleBinRequest, opts ...grpc.CallOption) (*SaveToRecycleBinResponse, error)
	RecycleBinRecover(ctx context.Context, in *RecoverFromRecycleBinRequest, opts ...grpc.CallOption) (*RecoverFromRecycleBinResponse, error)
	RecycleBinRemove(ctx context.Context, in *RemoveFromRecycleBinRequest, opts ...grpc.CallOption) (*RemoveFromRecycleBinResponse, error)
	RecycleBinPage(ctx context.Context, in *PageRecycleBinShortLinkRequest, opts ...grpc.CallOption) (*PageRecycleBinShortLinkResponse, error)
	// --------------------- 短链接统计接口 ---------------------
	StatsGetSingle(ctx context.Context, in *GetSingleStatsRequest, opts ...grpc.CallOption) (*GetSingleStatsResponse, error)
	StatsGetGroup(ctx context.Context, in *GetGroupStatsRequest, opts ...grpc.CallOption) (*GetGroupStatsResponse, error)
	StatsAccessRecordQuery(ctx context.Context, in *AccessRecordQueryRequest, opts ...grpc.CallOption) (*AccessRecordQueryResponse, error)
	StatsGroupAccessRecordQuery(ctx context.Context, in *GroupAccessRecordQueryRequest, opts ...grpc.CallOption) (*GroupAccessRecordQueryResponse, error)
	// --------------------- URL标题功能接口 ---------------------
	UrlTitleGet(ctx context.Context, in *GetUrlTitleRequest, opts ...grpc.CallOption) (*GetUrlTitleResponse, error)
	// --------------------- IP位置查询接口 ---------------------
	GetIpLocation(ctx context.Context, in *GetIPLocationRequest, opts ...grpc.CallOption) (*GetIPLocationResponse, error)
}

type shortLinkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShortLinkServiceClient(cc grpc.ClientConnInterface) ShortLinkServiceClient {
	return &shortLinkServiceClient{cc}
}

func (c *shortLinkServiceClient) ShortLinkCreate(ctx context.Context, in *CreateShortLinkRequest, opts ...grpc.CallOption) (*CreateShortLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateShortLinkResponse)
	err := c.cc.Invoke(ctx, ShortLinkService_ShortLinkCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortLinkServiceClient) ShortLinkBatchCreate(ctx context.Context, in *BatchCreateShortLinkRequest, opts ...grpc.CallOption) (*BatchCreateShortLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCreateShortLinkResponse)
	err := c.cc.Invoke(ctx, ShortLinkService_ShortLinkBatchCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortLinkServiceClient) ShortLinkUpdate(ctx context.Context, in *UpdateShortLinkRequest, opts ...grpc.CallOption) (*UpdateShortLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateShortLinkResponse)
	err := c.cc.Invoke(ctx, ShortLinkService_ShortLinkUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortLinkServiceClient) ShortLinkPage(ctx context.Context, in *PageShortLinkRequest, opts ...grpc.CallOption) (*PageShortLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PageShortLinkResponse)
	err := c.cc.Invoke(ctx, ShortLinkService_ShortLinkPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortLinkServiceClient) ShortLinkListGroupCount(ctx context.Context, in *GroupShortLinkCountRequest, opts ...grpc.CallOption) (*GroupShortLinkCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupShortLinkCountResponse)
	err := c.cc.Invoke(ctx, ShortLinkService_ShortLinkListGroupCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortLinkServiceClient) RestoreUrl(ctx context.Context, in *RestoreUrlRequest, opts ...grpc.CallOption) (*RestoreUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestoreUrlResponse)
	err := c.cc.Invoke(ctx, ShortLinkService_RestoreUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortLinkServiceClient) ShortLinkStats(ctx context.Context, in *ShortLinkStatsRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, ShortLinkService_ShortLinkStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortLinkServiceClient) RecycleBinSave(ctx context.Context, in *SaveToRecycleBinRequest, opts ...grpc.CallOption) (*SaveToRecycleBinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveToRecycleBinResponse)
	err := c.cc.Invoke(ctx, ShortLinkService_RecycleBinSave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortLinkServiceClient) RecycleBinRecover(ctx context.Context, in *RecoverFromRecycleBinRequest, opts ...grpc.CallOption) (*RecoverFromRecycleBinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecoverFromRecycleBinResponse)
	err := c.cc.Invoke(ctx, ShortLinkService_RecycleBinRecover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortLinkServiceClient) RecycleBinRemove(ctx context.Context, in *RemoveFromRecycleBinRequest, opts ...grpc.CallOption) (*RemoveFromRecycleBinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFromRecycleBinResponse)
	err := c.cc.Invoke(ctx, ShortLinkService_RecycleBinRemove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortLinkServiceClient) RecycleBinPage(ctx context.Context, in *PageRecycleBinShortLinkRequest, opts ...grpc.CallOption) (*PageRecycleBinShortLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PageRecycleBinShortLinkResponse)
	err := c.cc.Invoke(ctx, ShortLinkService_RecycleBinPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortLinkServiceClient) StatsGetSingle(ctx context.Context, in *GetSingleStatsRequest, opts ...grpc.CallOption) (*GetSingleStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSingleStatsResponse)
	err := c.cc.Invoke(ctx, ShortLinkService_StatsGetSingle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortLinkServiceClient) StatsGetGroup(ctx context.Context, in *GetGroupStatsRequest, opts ...grpc.CallOption) (*GetGroupStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGroupStatsResponse)
	err := c.cc.Invoke(ctx, ShortLinkService_StatsGetGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortLinkServiceClient) StatsAccessRecordQuery(ctx context.Context, in *AccessRecordQueryRequest, opts ...grpc.CallOption) (*AccessRecordQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessRecordQueryResponse)
	err := c.cc.Invoke(ctx, ShortLinkService_StatsAccessRecordQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortLinkServiceClient) StatsGroupAccessRecordQuery(ctx context.Context, in *GroupAccessRecordQueryRequest, opts ...grpc.CallOption) (*GroupAccessRecordQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupAccessRecordQueryResponse)
	err := c.cc.Invoke(ctx, ShortLinkService_StatsGroupAccessRecordQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortLinkServiceClient) UrlTitleGet(ctx context.Context, in *GetUrlTitleRequest, opts ...grpc.CallOption) (*GetUrlTitleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUrlTitleResponse)
	err := c.cc.Invoke(ctx, ShortLinkService_UrlTitleGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortLinkServiceClient) GetIpLocation(ctx context.Context, in *GetIPLocationRequest, opts ...grpc.CallOption) (*GetIPLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIPLocationResponse)
	err := c.cc.Invoke(ctx, ShortLinkService_GetIpLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortLinkServiceServer is the server API for ShortLinkService service.
// All implementations must embed UnimplementedShortLinkServiceServer
// for forward compatibility.
//
// --------------------- 服务定义 ---------------------
type ShortLinkServiceServer interface {
	// --------------------- 短链接管理接口 ---------------------
	ShortLinkCreate(context.Context, *CreateShortLinkRequest) (*CreateShortLinkResponse, error)
	ShortLinkBatchCreate(context.Context, *BatchCreateShortLinkRequest) (*BatchCreateShortLinkResponse, error)
	ShortLinkUpdate(context.Context, *UpdateShortLinkRequest) (*UpdateShortLinkResponse, error)
	ShortLinkPage(context.Context, *PageShortLinkRequest) (*PageShortLinkResponse, error)
	// 查询短链接分组内数量
	ShortLinkListGroupCount(context.Context, *GroupShortLinkCountRequest) (*GroupShortLinkCountResponse, error)
	// 短链接跳转
	RestoreUrl(context.Context, *RestoreUrlRequest) (*RestoreUrlResponse, error)
	// 短链接统计
	ShortLinkStats(context.Context, *ShortLinkStatsRequest) (*EmptyResponse, error)
	// --------------------- 回收站管理接口 ---------------------
	RecycleBinSave(context.Context, *SaveToRecycleBinRequest) (*SaveToRecycleBinResponse, error)
	RecycleBinRecover(context.Context, *RecoverFromRecycleBinRequest) (*RecoverFromRecycleBinResponse, error)
	RecycleBinRemove(context.Context, *RemoveFromRecycleBinRequest) (*RemoveFromRecycleBinResponse, error)
	RecycleBinPage(context.Context, *PageRecycleBinShortLinkRequest) (*PageRecycleBinShortLinkResponse, error)
	// --------------------- 短链接统计接口 ---------------------
	StatsGetSingle(context.Context, *GetSingleStatsRequest) (*GetSingleStatsResponse, error)
	StatsGetGroup(context.Context, *GetGroupStatsRequest) (*GetGroupStatsResponse, error)
	StatsAccessRecordQuery(context.Context, *AccessRecordQueryRequest) (*AccessRecordQueryResponse, error)
	StatsGroupAccessRecordQuery(context.Context, *GroupAccessRecordQueryRequest) (*GroupAccessRecordQueryResponse, error)
	// --------------------- URL标题功能接口 ---------------------
	UrlTitleGet(context.Context, *GetUrlTitleRequest) (*GetUrlTitleResponse, error)
	// --------------------- IP位置查询接口 ---------------------
	GetIpLocation(context.Context, *GetIPLocationRequest) (*GetIPLocationResponse, error)
	mustEmbedUnimplementedShortLinkServiceServer()
}

// UnimplementedShortLinkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShortLinkServiceServer struct{}

func (UnimplementedShortLinkServiceServer) ShortLinkCreate(context.Context, *CreateShortLinkRequest) (*CreateShortLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortLinkCreate not implemented")
}
func (UnimplementedShortLinkServiceServer) ShortLinkBatchCreate(context.Context, *BatchCreateShortLinkRequest) (*BatchCreateShortLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortLinkBatchCreate not implemented")
}
func (UnimplementedShortLinkServiceServer) ShortLinkUpdate(context.Context, *UpdateShortLinkRequest) (*UpdateShortLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortLinkUpdate not implemented")
}
func (UnimplementedShortLinkServiceServer) ShortLinkPage(context.Context, *PageShortLinkRequest) (*PageShortLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortLinkPage not implemented")
}
func (UnimplementedShortLinkServiceServer) ShortLinkListGroupCount(context.Context, *GroupShortLinkCountRequest) (*GroupShortLinkCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortLinkListGroupCount not implemented")
}
func (UnimplementedShortLinkServiceServer) RestoreUrl(context.Context, *RestoreUrlRequest) (*RestoreUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreUrl not implemented")
}
func (UnimplementedShortLinkServiceServer) ShortLinkStats(context.Context, *ShortLinkStatsRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortLinkStats not implemented")
}
func (UnimplementedShortLinkServiceServer) RecycleBinSave(context.Context, *SaveToRecycleBinRequest) (*SaveToRecycleBinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecycleBinSave not implemented")
}
func (UnimplementedShortLinkServiceServer) RecycleBinRecover(context.Context, *RecoverFromRecycleBinRequest) (*RecoverFromRecycleBinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecycleBinRecover not implemented")
}
func (UnimplementedShortLinkServiceServer) RecycleBinRemove(context.Context, *RemoveFromRecycleBinRequest) (*RemoveFromRecycleBinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecycleBinRemove not implemented")
}
func (UnimplementedShortLinkServiceServer) RecycleBinPage(context.Context, *PageRecycleBinShortLinkRequest) (*PageRecycleBinShortLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecycleBinPage not implemented")
}
func (UnimplementedShortLinkServiceServer) StatsGetSingle(context.Context, *GetSingleStatsRequest) (*GetSingleStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsGetSingle not implemented")
}
func (UnimplementedShortLinkServiceServer) StatsGetGroup(context.Context, *GetGroupStatsRequest) (*GetGroupStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsGetGroup not implemented")
}
func (UnimplementedShortLinkServiceServer) StatsAccessRecordQuery(context.Context, *AccessRecordQueryRequest) (*AccessRecordQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsAccessRecordQuery not implemented")
}
func (UnimplementedShortLinkServiceServer) StatsGroupAccessRecordQuery(context.Context, *GroupAccessRecordQueryRequest) (*GroupAccessRecordQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsGroupAccessRecordQuery not implemented")
}
func (UnimplementedShortLinkServiceServer) UrlTitleGet(context.Context, *GetUrlTitleRequest) (*GetUrlTitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UrlTitleGet not implemented")
}
func (UnimplementedShortLinkServiceServer) GetIpLocation(context.Context, *GetIPLocationRequest) (*GetIPLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIpLocation not implemented")
}
func (UnimplementedShortLinkServiceServer) mustEmbedUnimplementedShortLinkServiceServer() {}
func (UnimplementedShortLinkServiceServer) testEmbeddedByValue()                          {}

// UnsafeShortLinkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortLinkServiceServer will
// result in compilation errors.
type UnsafeShortLinkServiceServer interface {
	mustEmbedUnimplementedShortLinkServiceServer()
}

func RegisterShortLinkServiceServer(s grpc.ServiceRegistrar, srv ShortLinkServiceServer) {
	// If the following call pancis, it indicates UnimplementedShortLinkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShortLinkService_ServiceDesc, srv)
}

func _ShortLinkService_ShortLinkCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortLinkServiceServer).ShortLinkCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortLinkService_ShortLinkCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortLinkServiceServer).ShortLinkCreate(ctx, req.(*CreateShortLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortLinkService_ShortLinkBatchCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateShortLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortLinkServiceServer).ShortLinkBatchCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortLinkService_ShortLinkBatchCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortLinkServiceServer).ShortLinkBatchCreate(ctx, req.(*BatchCreateShortLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortLinkService_ShortLinkUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShortLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortLinkServiceServer).ShortLinkUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortLinkService_ShortLinkUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortLinkServiceServer).ShortLinkUpdate(ctx, req.(*UpdateShortLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortLinkService_ShortLinkPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageShortLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortLinkServiceServer).ShortLinkPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortLinkService_ShortLinkPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortLinkServiceServer).ShortLinkPage(ctx, req.(*PageShortLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortLinkService_ShortLinkListGroupCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupShortLinkCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortLinkServiceServer).ShortLinkListGroupCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortLinkService_ShortLinkListGroupCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortLinkServiceServer).ShortLinkListGroupCount(ctx, req.(*GroupShortLinkCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortLinkService_RestoreUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortLinkServiceServer).RestoreUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortLinkService_RestoreUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortLinkServiceServer).RestoreUrl(ctx, req.(*RestoreUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortLinkService_ShortLinkStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortLinkStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortLinkServiceServer).ShortLinkStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortLinkService_ShortLinkStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortLinkServiceServer).ShortLinkStats(ctx, req.(*ShortLinkStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortLinkService_RecycleBinSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveToRecycleBinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortLinkServiceServer).RecycleBinSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortLinkService_RecycleBinSave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortLinkServiceServer).RecycleBinSave(ctx, req.(*SaveToRecycleBinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortLinkService_RecycleBinRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverFromRecycleBinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortLinkServiceServer).RecycleBinRecover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortLinkService_RecycleBinRecover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortLinkServiceServer).RecycleBinRecover(ctx, req.(*RecoverFromRecycleBinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortLinkService_RecycleBinRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromRecycleBinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortLinkServiceServer).RecycleBinRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortLinkService_RecycleBinRemove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortLinkServiceServer).RecycleBinRemove(ctx, req.(*RemoveFromRecycleBinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortLinkService_RecycleBinPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageRecycleBinShortLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortLinkServiceServer).RecycleBinPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortLinkService_RecycleBinPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortLinkServiceServer).RecycleBinPage(ctx, req.(*PageRecycleBinShortLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortLinkService_StatsGetSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortLinkServiceServer).StatsGetSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortLinkService_StatsGetSingle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortLinkServiceServer).StatsGetSingle(ctx, req.(*GetSingleStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortLinkService_StatsGetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortLinkServiceServer).StatsGetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortLinkService_StatsGetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortLinkServiceServer).StatsGetGroup(ctx, req.(*GetGroupStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortLinkService_StatsAccessRecordQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessRecordQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortLinkServiceServer).StatsAccessRecordQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortLinkService_StatsAccessRecordQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortLinkServiceServer).StatsAccessRecordQuery(ctx, req.(*AccessRecordQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortLinkService_StatsGroupAccessRecordQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupAccessRecordQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortLinkServiceServer).StatsGroupAccessRecordQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortLinkService_StatsGroupAccessRecordQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortLinkServiceServer).StatsGroupAccessRecordQuery(ctx, req.(*GroupAccessRecordQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortLinkService_UrlTitleGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUrlTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortLinkServiceServer).UrlTitleGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortLinkService_UrlTitleGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortLinkServiceServer).UrlTitleGet(ctx, req.(*GetUrlTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortLinkService_GetIpLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIPLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortLinkServiceServer).GetIpLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortLinkService_GetIpLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortLinkServiceServer).GetIpLocation(ctx, req.(*GetIPLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortLinkService_ServiceDesc is the grpc.ServiceDesc for ShortLinkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortLinkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortlink.ShortLinkService",
	HandlerType: (*ShortLinkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShortLinkCreate",
			Handler:    _ShortLinkService_ShortLinkCreate_Handler,
		},
		{
			MethodName: "ShortLinkBatchCreate",
			Handler:    _ShortLinkService_ShortLinkBatchCreate_Handler,
		},
		{
			MethodName: "ShortLinkUpdate",
			Handler:    _ShortLinkService_ShortLinkUpdate_Handler,
		},
		{
			MethodName: "ShortLinkPage",
			Handler:    _ShortLinkService_ShortLinkPage_Handler,
		},
		{
			MethodName: "ShortLinkListGroupCount",
			Handler:    _ShortLinkService_ShortLinkListGroupCount_Handler,
		},
		{
			MethodName: "RestoreUrl",
			Handler:    _ShortLinkService_RestoreUrl_Handler,
		},
		{
			MethodName: "ShortLinkStats",
			Handler:    _ShortLinkService_ShortLinkStats_Handler,
		},
		{
			MethodName: "RecycleBinSave",
			Handler:    _ShortLinkService_RecycleBinSave_Handler,
		},
		{
			MethodName: "RecycleBinRecover",
			Handler:    _ShortLinkService_RecycleBinRecover_Handler,
		},
		{
			MethodName: "RecycleBinRemove",
			Handler:    _ShortLinkService_RecycleBinRemove_Handler,
		},
		{
			MethodName: "RecycleBinPage",
			Handler:    _ShortLinkService_RecycleBinPage_Handler,
		},
		{
			MethodName: "StatsGetSingle",
			Handler:    _ShortLinkService_StatsGetSingle_Handler,
		},
		{
			MethodName: "StatsGetGroup",
			Handler:    _ShortLinkService_StatsGetGroup_Handler,
		},
		{
			MethodName: "StatsAccessRecordQuery",
			Handler:    _ShortLinkService_StatsAccessRecordQuery_Handler,
		},
		{
			MethodName: "StatsGroupAccessRecordQuery",
			Handler:    _ShortLinkService_StatsGroupAccessRecordQuery_Handler,
		},
		{
			MethodName: "UrlTitleGet",
			Handler:    _ShortLinkService_UrlTitleGet_Handler,
		},
		{
			MethodName: "GetIpLocation",
			Handler:    _ShortLinkService_GetIpLocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "link.proto",
}
