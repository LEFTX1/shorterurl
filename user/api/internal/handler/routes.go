// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.1

package handler

import (
	"net/http"

	group "shorterurl/user/api/internal/handler/group"
	link "shorterurl/user/api/internal/handler/link"
	recycle "shorterurl/user/api/internal/handler/recycle"
	stats "shorterurl/user/api/internal/handler/stats"
	user "shorterurl/user/api/internal/handler/user"
	utility "shorterurl/user/api/internal/handler/utility"
	"shorterurl/user/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.TokenValidateMiddleware},
			[]rest.Route{
				{
					// 创建分组
					Method:  http.MethodPost,
					Path:    "/api/short-link/admin/v1/group",
					Handler: group.CreateGroupHandler(serverCtx),
				},
				{
					// 获取分组列表
					Method:  http.MethodGet,
					Path:    "/api/short-link/admin/v1/group",
					Handler: group.ListGroupsHandler(serverCtx),
				},
				{
					// 更新分组
					Method:  http.MethodPut,
					Path:    "/api/short-link/admin/v1/group",
					Handler: group.UpdateGroupHandler(serverCtx),
				},
				{
					// 删除分组
					Method:  http.MethodDelete,
					Path:    "/api/short-link/admin/v1/group",
					Handler: group.DeleteGroupHandler(serverCtx),
				},
				{
					// 分组排序
					Method:  http.MethodPost,
					Path:    "/api/short-link/admin/v1/group/sort",
					Handler: group.SortGroupsHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.TokenValidateMiddleware},
			[]rest.Route{
				{
					// 分页查询短链接
					Method:  http.MethodGet,
					Path:    "/api/short-link/admin/v1/link",
					Handler: link.PageShortLinkHandler(serverCtx),
				},
				{
					// 创建短链接
					Method:  http.MethodPost,
					Path:    "/api/short-link/admin/v1/link",
					Handler: link.CreateShortLinkHandler(serverCtx),
				},
				{
					// 更新短链接
					Method:  http.MethodPut,
					Path:    "/api/short-link/admin/v1/link",
					Handler: link.UpdateShortLinkHandler(serverCtx),
				},
				{
					// 批量创建短链接
					Method:  http.MethodPost,
					Path:    "/api/short-link/admin/v1/link/batch",
					Handler: link.BatchCreateShortLinkHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.TokenValidateMiddleware},
			[]rest.Route{
				{
					// 分页查询回收站短链接
					Method:  http.MethodGet,
					Path:    "/api/short-link/admin/v1/recycle-bin/page",
					Handler: recycle.RecycleBinPageHandler(serverCtx),
				},
				{
					// 恢复短链接
					Method:  http.MethodPost,
					Path:    "/api/short-link/admin/v1/recycle-bin/recover",
					Handler: recycle.RecycleBinRecoverHandler(serverCtx),
				},
				{
					// 移除短链接
					Method:  http.MethodPost,
					Path:    "/api/short-link/admin/v1/recycle-bin/remove",
					Handler: recycle.RecycleBinRemoveHandler(serverCtx),
				},
				{
					// 保存到回收站
					Method:  http.MethodPost,
					Path:    "/api/short-link/admin/v1/recycle-bin/save",
					Handler: recycle.RecycleBinSaveHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.TokenValidateMiddleware},
			[]rest.Route{
				{
					// 获取单个短链接监控数据
					Method:  http.MethodGet,
					Path:    "/api/short-link/admin/v1/stats",
					Handler: stats.ShortLinkStatsHandler(serverCtx),
				},
				{
					// 短链接访问记录查询
					Method:  http.MethodGet,
					Path:    "/api/short-link/admin/v1/stats/access-record",
					Handler: stats.ShortLinkAccessRecordHandler(serverCtx),
				},
				{
					// 分组短链接访问记录查询
					Method:  http.MethodGet,
					Path:    "/api/short-link/admin/v1/stats/access-record/group",
					Handler: stats.ShortLinkGroupAccessRecordHandler(serverCtx),
				},
				{
					// 获取分组短链接监控数据
					Method:  http.MethodGet,
					Path:    "/api/short-link/admin/v1/stats/group",
					Handler: stats.ShortLinkGroupStatsHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 用户注册
				Method:  http.MethodPost,
				Path:    "/api/short-link/admin/v1/user",
				Handler: user.ApiUserRegisterHandler(serverCtx),
			},
			{
				// 检查用户名是否存在
				Method:  http.MethodGet,
				Path:    "/api/short-link/admin/v1/user/has-username",
				Handler: user.ApiCheckUsernameHandler(serverCtx),
			},
			{
				// 用户登录
				Method:  http.MethodPost,
				Path:    "/api/short-link/admin/v1/user/login",
				Handler: user.ApiUserLoginHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.TokenValidateMiddleware},
			[]rest.Route{
				{
					// 获取无脱敏用户信息
					Method:  http.MethodGet,
					Path:    "/api/short-link/admin/v1/actual/user/:username",
					Handler: user.ApiActualUserInfoHandler(serverCtx),
				},
				{
					// 更新用户信息
					Method:  http.MethodPut,
					Path:    "/api/short-link/admin/v1/user",
					Handler: user.ApiUserUpdateHandler(serverCtx),
				},
				{
					// 获取用户信息
					Method:  http.MethodGet,
					Path:    "/api/short-link/admin/v1/user/:username",
					Handler: user.ApiUserInfoHandler(serverCtx),
				},
				{
					// 检查用户是否登录
					Method:  http.MethodGet,
					Path:    "/api/short-link/admin/v1/user/check-login",
					Handler: user.ApiCheckLoginHandler(serverCtx),
				},
				{
					// 用户退出登录
					Method:  http.MethodDelete,
					Path:    "/api/short-link/admin/v1/user/logout",
					Handler: user.ApiLogoutHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.TokenValidateMiddleware},
			[]rest.Route{
				{
					// 获取网站标题
					Method:  http.MethodGet,
					Path:    "/api/short-link/admin/v1/title",
					Handler: utility.GetUrlTitleHandler(serverCtx),
				},
			}...,
		),
	)
}
