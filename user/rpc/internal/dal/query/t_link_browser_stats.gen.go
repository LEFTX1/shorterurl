// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"shorterurl/user/rpc/internal/dal/model"
)

func newTLinkBrowserStat(db *gorm.DB, opts ...gen.DOOption) tLinkBrowserStat {
	_tLinkBrowserStat := tLinkBrowserStat{}

	_tLinkBrowserStat.tLinkBrowserStatDo.UseDB(db, opts...)
	_tLinkBrowserStat.tLinkBrowserStatDo.UseModel(&model.TLinkBrowserStat{})

	tableName := _tLinkBrowserStat.tLinkBrowserStatDo.TableName()
	_tLinkBrowserStat.ALL = field.NewAsterisk(tableName)
	_tLinkBrowserStat.ID = field.NewInt64(tableName, "id")
	_tLinkBrowserStat.FullShortURL = field.NewString(tableName, "full_short_url")
	_tLinkBrowserStat.Date = field.NewTime(tableName, "date")
	_tLinkBrowserStat.Cnt = field.NewInt32(tableName, "cnt")
	_tLinkBrowserStat.Browser = field.NewString(tableName, "browser")
	_tLinkBrowserStat.CreateTime = field.NewTime(tableName, "create_time")
	_tLinkBrowserStat.UpdateTime = field.NewTime(tableName, "update_time")
	_tLinkBrowserStat.DelFlag = field.NewBool(tableName, "del_flag")

	_tLinkBrowserStat.fillFieldMap()

	return _tLinkBrowserStat
}

type tLinkBrowserStat struct {
	tLinkBrowserStatDo

	ALL          field.Asterisk
	ID           field.Int64  // ID
	FullShortURL field.String // 完整短链接
	Date         field.Time   // 日期
	Cnt          field.Int32  // 访问量
	Browser      field.String // 浏览器
	CreateTime   field.Time   // 创建时间
	UpdateTime   field.Time   // 修改时间
	DelFlag      field.Bool   // 删除标识 0：未删除 1：已删除

	fieldMap map[string]field.Expr
}

func (t tLinkBrowserStat) Table(newTableName string) *tLinkBrowserStat {
	t.tLinkBrowserStatDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tLinkBrowserStat) As(alias string) *tLinkBrowserStat {
	t.tLinkBrowserStatDo.DO = *(t.tLinkBrowserStatDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tLinkBrowserStat) updateTableName(table string) *tLinkBrowserStat {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.FullShortURL = field.NewString(table, "full_short_url")
	t.Date = field.NewTime(table, "date")
	t.Cnt = field.NewInt32(table, "cnt")
	t.Browser = field.NewString(table, "browser")
	t.CreateTime = field.NewTime(table, "create_time")
	t.UpdateTime = field.NewTime(table, "update_time")
	t.DelFlag = field.NewBool(table, "del_flag")

	t.fillFieldMap()

	return t
}

func (t *tLinkBrowserStat) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tLinkBrowserStat) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.ID
	t.fieldMap["full_short_url"] = t.FullShortURL
	t.fieldMap["date"] = t.Date
	t.fieldMap["cnt"] = t.Cnt
	t.fieldMap["browser"] = t.Browser
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["update_time"] = t.UpdateTime
	t.fieldMap["del_flag"] = t.DelFlag
}

func (t tLinkBrowserStat) clone(db *gorm.DB) tLinkBrowserStat {
	t.tLinkBrowserStatDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tLinkBrowserStat) replaceDB(db *gorm.DB) tLinkBrowserStat {
	t.tLinkBrowserStatDo.ReplaceDB(db)
	return t
}

type tLinkBrowserStatDo struct{ gen.DO }

type ITLinkBrowserStatDo interface {
	gen.SubQuery
	Debug() ITLinkBrowserStatDo
	WithContext(ctx context.Context) ITLinkBrowserStatDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITLinkBrowserStatDo
	WriteDB() ITLinkBrowserStatDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITLinkBrowserStatDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITLinkBrowserStatDo
	Not(conds ...gen.Condition) ITLinkBrowserStatDo
	Or(conds ...gen.Condition) ITLinkBrowserStatDo
	Select(conds ...field.Expr) ITLinkBrowserStatDo
	Where(conds ...gen.Condition) ITLinkBrowserStatDo
	Order(conds ...field.Expr) ITLinkBrowserStatDo
	Distinct(cols ...field.Expr) ITLinkBrowserStatDo
	Omit(cols ...field.Expr) ITLinkBrowserStatDo
	Join(table schema.Tabler, on ...field.Expr) ITLinkBrowserStatDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITLinkBrowserStatDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITLinkBrowserStatDo
	Group(cols ...field.Expr) ITLinkBrowserStatDo
	Having(conds ...gen.Condition) ITLinkBrowserStatDo
	Limit(limit int) ITLinkBrowserStatDo
	Offset(offset int) ITLinkBrowserStatDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITLinkBrowserStatDo
	Unscoped() ITLinkBrowserStatDo
	Create(values ...*model.TLinkBrowserStat) error
	CreateInBatches(values []*model.TLinkBrowserStat, batchSize int) error
	Save(values ...*model.TLinkBrowserStat) error
	First() (*model.TLinkBrowserStat, error)
	Take() (*model.TLinkBrowserStat, error)
	Last() (*model.TLinkBrowserStat, error)
	Find() ([]*model.TLinkBrowserStat, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TLinkBrowserStat, err error)
	FindInBatches(result *[]*model.TLinkBrowserStat, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TLinkBrowserStat) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITLinkBrowserStatDo
	Assign(attrs ...field.AssignExpr) ITLinkBrowserStatDo
	Joins(fields ...field.RelationField) ITLinkBrowserStatDo
	Preload(fields ...field.RelationField) ITLinkBrowserStatDo
	FirstOrInit() (*model.TLinkBrowserStat, error)
	FirstOrCreate() (*model.TLinkBrowserStat, error)
	FindByPage(offset int, limit int) (result []*model.TLinkBrowserStat, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITLinkBrowserStatDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tLinkBrowserStatDo) Debug() ITLinkBrowserStatDo {
	return t.withDO(t.DO.Debug())
}

func (t tLinkBrowserStatDo) WithContext(ctx context.Context) ITLinkBrowserStatDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tLinkBrowserStatDo) ReadDB() ITLinkBrowserStatDo {
	return t.Clauses(dbresolver.Read)
}

func (t tLinkBrowserStatDo) WriteDB() ITLinkBrowserStatDo {
	return t.Clauses(dbresolver.Write)
}

func (t tLinkBrowserStatDo) Session(config *gorm.Session) ITLinkBrowserStatDo {
	return t.withDO(t.DO.Session(config))
}

func (t tLinkBrowserStatDo) Clauses(conds ...clause.Expression) ITLinkBrowserStatDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tLinkBrowserStatDo) Returning(value interface{}, columns ...string) ITLinkBrowserStatDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tLinkBrowserStatDo) Not(conds ...gen.Condition) ITLinkBrowserStatDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tLinkBrowserStatDo) Or(conds ...gen.Condition) ITLinkBrowserStatDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tLinkBrowserStatDo) Select(conds ...field.Expr) ITLinkBrowserStatDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tLinkBrowserStatDo) Where(conds ...gen.Condition) ITLinkBrowserStatDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tLinkBrowserStatDo) Order(conds ...field.Expr) ITLinkBrowserStatDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tLinkBrowserStatDo) Distinct(cols ...field.Expr) ITLinkBrowserStatDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tLinkBrowserStatDo) Omit(cols ...field.Expr) ITLinkBrowserStatDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tLinkBrowserStatDo) Join(table schema.Tabler, on ...field.Expr) ITLinkBrowserStatDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tLinkBrowserStatDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITLinkBrowserStatDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tLinkBrowserStatDo) RightJoin(table schema.Tabler, on ...field.Expr) ITLinkBrowserStatDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tLinkBrowserStatDo) Group(cols ...field.Expr) ITLinkBrowserStatDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tLinkBrowserStatDo) Having(conds ...gen.Condition) ITLinkBrowserStatDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tLinkBrowserStatDo) Limit(limit int) ITLinkBrowserStatDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tLinkBrowserStatDo) Offset(offset int) ITLinkBrowserStatDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tLinkBrowserStatDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITLinkBrowserStatDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tLinkBrowserStatDo) Unscoped() ITLinkBrowserStatDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tLinkBrowserStatDo) Create(values ...*model.TLinkBrowserStat) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tLinkBrowserStatDo) CreateInBatches(values []*model.TLinkBrowserStat, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tLinkBrowserStatDo) Save(values ...*model.TLinkBrowserStat) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tLinkBrowserStatDo) First() (*model.TLinkBrowserStat, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLinkBrowserStat), nil
	}
}

func (t tLinkBrowserStatDo) Take() (*model.TLinkBrowserStat, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLinkBrowserStat), nil
	}
}

func (t tLinkBrowserStatDo) Last() (*model.TLinkBrowserStat, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLinkBrowserStat), nil
	}
}

func (t tLinkBrowserStatDo) Find() ([]*model.TLinkBrowserStat, error) {
	result, err := t.DO.Find()
	return result.([]*model.TLinkBrowserStat), err
}

func (t tLinkBrowserStatDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TLinkBrowserStat, err error) {
	buf := make([]*model.TLinkBrowserStat, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tLinkBrowserStatDo) FindInBatches(result *[]*model.TLinkBrowserStat, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tLinkBrowserStatDo) Attrs(attrs ...field.AssignExpr) ITLinkBrowserStatDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tLinkBrowserStatDo) Assign(attrs ...field.AssignExpr) ITLinkBrowserStatDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tLinkBrowserStatDo) Joins(fields ...field.RelationField) ITLinkBrowserStatDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tLinkBrowserStatDo) Preload(fields ...field.RelationField) ITLinkBrowserStatDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tLinkBrowserStatDo) FirstOrInit() (*model.TLinkBrowserStat, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLinkBrowserStat), nil
	}
}

func (t tLinkBrowserStatDo) FirstOrCreate() (*model.TLinkBrowserStat, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLinkBrowserStat), nil
	}
}

func (t tLinkBrowserStatDo) FindByPage(offset int, limit int) (result []*model.TLinkBrowserStat, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tLinkBrowserStatDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tLinkBrowserStatDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tLinkBrowserStatDo) Delete(models ...*model.TLinkBrowserStat) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tLinkBrowserStatDo) withDO(do gen.Dao) *tLinkBrowserStatDo {
	t.DO = *do.(*gen.DO)
	return t
}
