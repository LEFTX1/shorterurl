// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.1
// Source: user.proto

package server

import (
	"context"

	"shorterurl/user/rpc/internal/logic"
	"shorterurl/user/rpc/internal/svc"
	"shorterurl/user/rpc/pb"
)

type UserServiceServer struct {
	svcCtx *svc.ServiceContext
	__.UnimplementedUserServiceServer
}

func NewUserServiceServer(svcCtx *svc.ServiceContext) *UserServiceServer {
	return &UserServiceServer{
		svcCtx: svcCtx,
	}
}

// 用户注册
func (s *UserServiceServer) UserRegister(ctx context.Context, in *__.RegisterRequest) (*__.RegisterResponse, error) {
	l := logic.NewUserRegisterLogic(ctx, s.svcCtx)
	return l.UserRegister(in)
}

// 用户登录
func (s *UserServiceServer) UserLogin(ctx context.Context, in *__.LoginRequest) (*__.LoginResponse, error) {
	l := logic.NewUserLoginLogic(ctx, s.svcCtx)
	return l.UserLogin(in)
}

// 获取用户信息
func (s *UserServiceServer) UserGetInfo(ctx context.Context, in *__.CheckUsernameRequest) (*__.UserInfoResponse, error) {
	l := logic.NewUserGetInfoLogic(ctx, s.svcCtx)
	return l.UserGetInfo(in)
}

// 获取无脱敏用户信息
func (s *UserServiceServer) UserGetActualInfo(ctx context.Context, in *__.CheckUsernameRequest) (*__.UserInfoResponse, error) {
	l := logic.NewUserGetActualInfoLogic(ctx, s.svcCtx)
	return l.UserGetActualInfo(in)
}

// 检查用户名是否存在
func (s *UserServiceServer) UserCheckUsername(ctx context.Context, in *__.CheckUsernameRequest) (*__.CheckUsernameResponse, error) {
	l := logic.NewUserCheckUsernameLogic(ctx, s.svcCtx)
	return l.UserCheckUsername(in)
}

// 更新用户信息
func (s *UserServiceServer) UserUpdate(ctx context.Context, in *__.UpdateRequest) (*__.CommonResponse, error) {
	l := logic.NewUserUpdateLogic(ctx, s.svcCtx)
	return l.UserUpdate(in)
}

// 检查用户是否登录
func (s *UserServiceServer) UserCheckLogin(ctx context.Context, in *__.CheckLoginRequest) (*__.CommonResponse, error) {
	l := logic.NewUserCheckLoginLogic(ctx, s.svcCtx)
	return l.UserCheckLogin(in)
}

// 用户退出登录
func (s *UserServiceServer) UserLogout(ctx context.Context, in *__.LogoutRequest) (*__.CommonResponse, error) {
	l := logic.NewUserLogoutLogic(ctx, s.svcCtx)
	return l.UserLogout(in)
}

// 创建分组
func (s *UserServiceServer) GroupCreate(ctx context.Context, in *__.GroupSaveRequest) (*__.CommonResponse, error) {
	l := logic.NewGroupCreateLogic(ctx, s.svcCtx)
	return l.GroupCreate(in)
}

// 获取分组列表
func (s *UserServiceServer) GroupList(in *__.CommonRequest, stream __.UserService_GroupListServer) error {
	l := logic.NewGroupListLogic(stream.Context(), s.svcCtx)
	return l.GroupList(in, stream)
}

// 更新分组
func (s *UserServiceServer) GroupUpdate(ctx context.Context, in *__.GroupUpdateRequest) (*__.CommonResponse, error) {
	l := logic.NewGroupUpdateLogic(ctx, s.svcCtx)
	return l.GroupUpdate(in)
}

// 删除分组
func (s *UserServiceServer) GroupDelete(ctx context.Context, in *__.GroupDeleteRequest) (*__.CommonResponse, error) {
	l := logic.NewGroupDeleteLogic(ctx, s.svcCtx)
	return l.GroupDelete(in)
}

// 分组排序
func (s *UserServiceServer) GroupSort(stream __.UserService_GroupSortServer) error {
	l := logic.NewGroupSortLogic(stream.Context(), s.svcCtx)
	return l.GroupSort(stream)
}

// 分页查询回收站短链接
func (s *UserServiceServer) RecycleBinPage(ctx context.Context, in *__.RecycleBinPageRequest) (*__.RecycleBinPageResponse, error) {
	l := logic.NewRecycleBinPageLogic(ctx, s.svcCtx)
	return l.RecycleBinPage(in)
}
