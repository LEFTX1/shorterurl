// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package server

import (
	"context"

	"shorterurl/user/rpc/internal/logic"
	"shorterurl/user/rpc/internal/svc"
	"shorterurl/user/rpc/user"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

// 用户注册
func (s *UserServer) RpcRegister(ctx context.Context, in *user.RegisterRequest) (*user.RegisterResponse, error) {
	l := logic.NewRpcRegisterLogic(ctx, s.svcCtx)
	return l.RpcRegister(in)
}

// 用户登录
func (s *UserServer) RpcLogin(ctx context.Context, in *user.LoginRequest) (*user.LoginResponse, error) {
	l := logic.NewRpcLoginLogic(ctx, s.svcCtx)
	return l.RpcLogin(in)
}

// 获取用户信息
func (s *UserServer) RpcGetUserInfo(ctx context.Context, in *user.CheckUsernameRequest) (*user.UserInfoResponse, error) {
	l := logic.NewRpcGetUserInfoLogic(ctx, s.svcCtx)
	return l.RpcGetUserInfo(in)
}

// 获取无脱敏用户信息
func (s *UserServer) RpcGetActualUserInfo(ctx context.Context, in *user.CheckUsernameRequest) (*user.UserInfoResponse, error) {
	l := logic.NewRpcGetActualUserInfoLogic(ctx, s.svcCtx)
	return l.RpcGetActualUserInfo(in)
}

// 检查用户名是否存在
func (s *UserServer) RpcCheckUsername(ctx context.Context, in *user.CheckUsernameRequest) (*user.CheckUsernameResponse, error) {
	l := logic.NewRpcCheckUsernameLogic(ctx, s.svcCtx)
	return l.RpcCheckUsername(in)
}

// 更新用户信息
func (s *UserServer) RpcUpdateUser(ctx context.Context, in *user.UpdateRequest) (*user.CommonResponse, error) {
	l := logic.NewRpcUpdateUserLogic(ctx, s.svcCtx)
	return l.RpcUpdateUser(in)
}

// 修改密码
func (s *UserServer) RpcUpdatePassword(ctx context.Context, in *user.UpdatePasswordRequest) (*user.CommonResponse, error) {
	l := logic.NewRpcUpdatePasswordLogic(ctx, s.svcCtx)
	return l.RpcUpdatePassword(in)
}

// 检查用户是否登录
func (s *UserServer) RpcCheckLogin(ctx context.Context, in *user.CheckUsernameRequest) (*user.CommonResponse, error) {
	l := logic.NewRpcCheckLoginLogic(ctx, s.svcCtx)
	return l.RpcCheckLogin(in)
}

// 用户退出登录
func (s *UserServer) RpcLogout(ctx context.Context, in *user.CheckUsernameRequest) (*user.CommonResponse, error) {
	l := logic.NewRpcLogoutLogic(ctx, s.svcCtx)
	return l.RpcLogout(in)
}
