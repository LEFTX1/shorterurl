// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: user/rpc/user.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_UserRegister_FullMethodName      = "/user.UserService/UserRegister"
	UserService_UserLogin_FullMethodName         = "/user.UserService/UserLogin"
	UserService_UserGetInfo_FullMethodName       = "/user.UserService/UserGetInfo"
	UserService_UserGetActualInfo_FullMethodName = "/user.UserService/UserGetActualInfo"
	UserService_UserCheckUsername_FullMethodName = "/user.UserService/UserCheckUsername"
	UserService_UserUpdate_FullMethodName        = "/user.UserService/UserUpdate"
	UserService_UserCheckLogin_FullMethodName    = "/user.UserService/UserCheckLogin"
	UserService_UserLogout_FullMethodName        = "/user.UserService/UserLogout"
	UserService_GroupCreate_FullMethodName       = "/user.UserService/GroupCreate"
	UserService_GroupList_FullMethodName         = "/user.UserService/GroupList"
	UserService_GroupUpdate_FullMethodName       = "/user.UserService/GroupUpdate"
	UserService_GroupDelete_FullMethodName       = "/user.UserService/GroupDelete"
	UserService_GroupSort_FullMethodName         = "/user.UserService/GroupSort"
	UserService_RecycleBinPage_FullMethodName    = "/user.UserService/RecycleBinPage"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// =================用户服务定义=================
type UserServiceClient interface {
	// 用户注册
	UserRegister(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// 用户登录
	UserLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// 获取用户信息
	UserGetInfo(ctx context.Context, in *CheckUsernameRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	// 获取无脱敏用户信息
	UserGetActualInfo(ctx context.Context, in *CheckUsernameRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	// 检查用户名是否存在
	UserCheckUsername(ctx context.Context, in *CheckUsernameRequest, opts ...grpc.CallOption) (*CheckUsernameResponse, error)
	// 更新用户信息
	UserUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// 检查用户是否登录
	UserCheckLogin(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// 用户退出登录
	UserLogout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// 创建分组
	GroupCreate(ctx context.Context, in *GroupSaveRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// 获取分组列表
	GroupList(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GroupResponse], error)
	// 更新分组
	GroupUpdate(ctx context.Context, in *GroupUpdateRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// 删除分组
	GroupDelete(ctx context.Context, in *GroupDeleteRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// 分组排序
	GroupSort(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[GroupSortRequest, CommonResponse], error)
	// 分页查询回收站短链接
	RecycleBinPage(ctx context.Context, in *RecycleBinPageRequest, opts ...grpc.CallOption) (*RecycleBinPageResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) UserRegister(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, UserService_UserRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, UserService_UserLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserGetInfo(ctx context.Context, in *CheckUsernameRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, UserService_UserGetInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserGetActualInfo(ctx context.Context, in *CheckUsernameRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, UserService_UserGetActualInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserCheckUsername(ctx context.Context, in *CheckUsernameRequest, opts ...grpc.CallOption) (*CheckUsernameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckUsernameResponse)
	err := c.cc.Invoke(ctx, UserService_UserCheckUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, UserService_UserUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserCheckLogin(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, UserService_UserCheckLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserLogout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, UserService_UserLogout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GroupCreate(ctx context.Context, in *GroupSaveRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, UserService_GroupCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GroupList(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GroupResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[0], UserService_GroupList_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CommonRequest, GroupResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_GroupListClient = grpc.ServerStreamingClient[GroupResponse]

func (c *userServiceClient) GroupUpdate(ctx context.Context, in *GroupUpdateRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, UserService_GroupUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GroupDelete(ctx context.Context, in *GroupDeleteRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, UserService_GroupDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GroupSort(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[GroupSortRequest, CommonResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[1], UserService_GroupSort_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GroupSortRequest, CommonResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_GroupSortClient = grpc.ClientStreamingClient[GroupSortRequest, CommonResponse]

func (c *userServiceClient) RecycleBinPage(ctx context.Context, in *RecycleBinPageRequest, opts ...grpc.CallOption) (*RecycleBinPageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecycleBinPageResponse)
	err := c.cc.Invoke(ctx, UserService_RecycleBinPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
//
// =================用户服务定义=================
type UserServiceServer interface {
	// 用户注册
	UserRegister(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// 用户登录
	UserLogin(context.Context, *LoginRequest) (*LoginResponse, error)
	// 获取用户信息
	UserGetInfo(context.Context, *CheckUsernameRequest) (*UserInfoResponse, error)
	// 获取无脱敏用户信息
	UserGetActualInfo(context.Context, *CheckUsernameRequest) (*UserInfoResponse, error)
	// 检查用户名是否存在
	UserCheckUsername(context.Context, *CheckUsernameRequest) (*CheckUsernameResponse, error)
	// 更新用户信息
	UserUpdate(context.Context, *UpdateRequest) (*CommonResponse, error)
	// 检查用户是否登录
	UserCheckLogin(context.Context, *LogoutRequest) (*CommonResponse, error)
	// 用户退出登录
	UserLogout(context.Context, *LogoutRequest) (*CommonResponse, error)
	// 创建分组
	GroupCreate(context.Context, *GroupSaveRequest) (*CommonResponse, error)
	// 获取分组列表
	GroupList(*CommonRequest, grpc.ServerStreamingServer[GroupResponse]) error
	// 更新分组
	GroupUpdate(context.Context, *GroupUpdateRequest) (*CommonResponse, error)
	// 删除分组
	GroupDelete(context.Context, *GroupDeleteRequest) (*CommonResponse, error)
	// 分组排序
	GroupSort(grpc.ClientStreamingServer[GroupSortRequest, CommonResponse]) error
	// 分页查询回收站短链接
	RecycleBinPage(context.Context, *RecycleBinPageRequest) (*RecycleBinPageResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) UserRegister(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedUserServiceServer) UserLogin(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedUserServiceServer) UserGetInfo(context.Context, *CheckUsernameRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetInfo not implemented")
}
func (UnimplementedUserServiceServer) UserGetActualInfo(context.Context, *CheckUsernameRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetActualInfo not implemented")
}
func (UnimplementedUserServiceServer) UserCheckUsername(context.Context, *CheckUsernameRequest) (*CheckUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCheckUsername not implemented")
}
func (UnimplementedUserServiceServer) UserUpdate(context.Context, *UpdateRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdate not implemented")
}
func (UnimplementedUserServiceServer) UserCheckLogin(context.Context, *LogoutRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCheckLogin not implemented")
}
func (UnimplementedUserServiceServer) UserLogout(context.Context, *LogoutRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogout not implemented")
}
func (UnimplementedUserServiceServer) GroupCreate(context.Context, *GroupSaveRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupCreate not implemented")
}
func (UnimplementedUserServiceServer) GroupList(*CommonRequest, grpc.ServerStreamingServer[GroupResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GroupList not implemented")
}
func (UnimplementedUserServiceServer) GroupUpdate(context.Context, *GroupUpdateRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupUpdate not implemented")
}
func (UnimplementedUserServiceServer) GroupDelete(context.Context, *GroupDeleteRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDelete not implemented")
}
func (UnimplementedUserServiceServer) GroupSort(grpc.ClientStreamingServer[GroupSortRequest, CommonResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GroupSort not implemented")
}
func (UnimplementedUserServiceServer) RecycleBinPage(context.Context, *RecycleBinPageRequest) (*RecycleBinPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecycleBinPage not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserRegister(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserGetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserGetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserGetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserGetInfo(ctx, req.(*CheckUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserGetActualInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserGetActualInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserGetActualInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserGetActualInfo(ctx, req.(*CheckUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserCheckUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserCheckUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserCheckUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserCheckUsername(ctx, req.(*CheckUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserUpdate(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserCheckLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserCheckLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserCheckLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserCheckLogin(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserLogout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserLogout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GroupCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GroupCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GroupCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GroupCreate(ctx, req.(*GroupSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GroupList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommonRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).GroupList(m, &grpc.GenericServerStream[CommonRequest, GroupResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_GroupListServer = grpc.ServerStreamingServer[GroupResponse]

func _UserService_GroupUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GroupUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GroupUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GroupUpdate(ctx, req.(*GroupUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GroupDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GroupDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GroupDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GroupDelete(ctx, req.(*GroupDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GroupSort_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).GroupSort(&grpc.GenericServerStream[GroupSortRequest, CommonResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_GroupSortServer = grpc.ClientStreamingServer[GroupSortRequest, CommonResponse]

func _UserService_RecycleBinPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecycleBinPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RecycleBinPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RecycleBinPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RecycleBinPage(ctx, req.(*RecycleBinPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserRegister",
			Handler:    _UserService_UserRegister_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _UserService_UserLogin_Handler,
		},
		{
			MethodName: "UserGetInfo",
			Handler:    _UserService_UserGetInfo_Handler,
		},
		{
			MethodName: "UserGetActualInfo",
			Handler:    _UserService_UserGetActualInfo_Handler,
		},
		{
			MethodName: "UserCheckUsername",
			Handler:    _UserService_UserCheckUsername_Handler,
		},
		{
			MethodName: "UserUpdate",
			Handler:    _UserService_UserUpdate_Handler,
		},
		{
			MethodName: "UserCheckLogin",
			Handler:    _UserService_UserCheckLogin_Handler,
		},
		{
			MethodName: "UserLogout",
			Handler:    _UserService_UserLogout_Handler,
		},
		{
			MethodName: "GroupCreate",
			Handler:    _UserService_GroupCreate_Handler,
		},
		{
			MethodName: "GroupUpdate",
			Handler:    _UserService_GroupUpdate_Handler,
		},
		{
			MethodName: "GroupDelete",
			Handler:    _UserService_GroupDelete_Handler,
		},
		{
			MethodName: "RecycleBinPage",
			Handler:    _UserService_RecycleBinPage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GroupList",
			Handler:       _UserService_GroupList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GroupSort",
			Handler:       _UserService_GroupSort_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "user/rpc/user.proto",
}
