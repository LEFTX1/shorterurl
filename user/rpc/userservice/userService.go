// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.1
// Source: user.proto

package userservice

import (
	"context"

	"shorterurl/user/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CheckLoginRequest      = __.CheckLoginRequest
	CheckUsernameRequest   = __.CheckUsernameRequest
	CheckUsernameResponse  = __.CheckUsernameResponse
	CommonRequest          = __.CommonRequest
	CommonResponse         = __.CommonResponse
	GroupDeleteRequest     = __.GroupDeleteRequest
	GroupResponse          = __.GroupResponse
	GroupSaveRequest       = __.GroupSaveRequest
	GroupSortRequest       = __.GroupSortRequest
	GroupUpdateRequest     = __.GroupUpdateRequest
	LoginRequest           = __.LoginRequest
	LoginResponse          = __.LoginResponse
	LogoutRequest          = __.LogoutRequest
	RecycleBinPageRequest  = __.RecycleBinPageRequest
	RecycleBinPageResponse = __.RecycleBinPageResponse
	RegisterRequest        = __.RegisterRequest
	RegisterResponse       = __.RegisterResponse
	ShortLinkPageRecord    = __.ShortLinkPageRecord
	UpdateRequest          = __.UpdateRequest
	UserInfoResponse       = __.UserInfoResponse

	UserService interface {
		// 用户注册
		UserRegister(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
		// 用户登录
		UserLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		// 获取用户信息
		UserGetInfo(ctx context.Context, in *CheckUsernameRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
		// 获取无脱敏用户信息
		UserGetActualInfo(ctx context.Context, in *CheckUsernameRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
		// 检查用户名是否存在
		UserCheckUsername(ctx context.Context, in *CheckUsernameRequest, opts ...grpc.CallOption) (*CheckUsernameResponse, error)
		// 更新用户信息
		UserUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*CommonResponse, error)
		// 检查用户是否登录
		UserCheckLogin(ctx context.Context, in *CheckLoginRequest, opts ...grpc.CallOption) (*CommonResponse, error)
		// 用户退出登录
		UserLogout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*CommonResponse, error)
		// 创建分组
		GroupCreate(ctx context.Context, in *GroupSaveRequest, opts ...grpc.CallOption) (*CommonResponse, error)
		// 获取分组列表
		GroupList(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (__.UserService_GroupListClient, error)
		// 更新分组
		GroupUpdate(ctx context.Context, in *GroupUpdateRequest, opts ...grpc.CallOption) (*CommonResponse, error)
		// 删除分组
		GroupDelete(ctx context.Context, in *GroupDeleteRequest, opts ...grpc.CallOption) (*CommonResponse, error)
		// 分组排序
		GroupSort(ctx context.Context, opts ...grpc.CallOption) (__.UserService_GroupSortClient, error)
		// 分页查询回收站短链接
		RecycleBinPage(ctx context.Context, in *RecycleBinPageRequest, opts ...grpc.CallOption) (*RecycleBinPageResponse, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

// 用户注册
func (m *defaultUserService) UserRegister(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	client := __.NewUserServiceClient(m.cli.Conn())
	return client.UserRegister(ctx, in, opts...)
}

// 用户登录
func (m *defaultUserService) UserLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := __.NewUserServiceClient(m.cli.Conn())
	return client.UserLogin(ctx, in, opts...)
}

// 获取用户信息
func (m *defaultUserService) UserGetInfo(ctx context.Context, in *CheckUsernameRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	client := __.NewUserServiceClient(m.cli.Conn())
	return client.UserGetInfo(ctx, in, opts...)
}

// 获取无脱敏用户信息
func (m *defaultUserService) UserGetActualInfo(ctx context.Context, in *CheckUsernameRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	client := __.NewUserServiceClient(m.cli.Conn())
	return client.UserGetActualInfo(ctx, in, opts...)
}

// 检查用户名是否存在
func (m *defaultUserService) UserCheckUsername(ctx context.Context, in *CheckUsernameRequest, opts ...grpc.CallOption) (*CheckUsernameResponse, error) {
	client := __.NewUserServiceClient(m.cli.Conn())
	return client.UserCheckUsername(ctx, in, opts...)
}

// 更新用户信息
func (m *defaultUserService) UserUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	client := __.NewUserServiceClient(m.cli.Conn())
	return client.UserUpdate(ctx, in, opts...)
}

// 检查用户是否登录
func (m *defaultUserService) UserCheckLogin(ctx context.Context, in *CheckLoginRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	client := __.NewUserServiceClient(m.cli.Conn())
	return client.UserCheckLogin(ctx, in, opts...)
}

// 用户退出登录
func (m *defaultUserService) UserLogout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	client := __.NewUserServiceClient(m.cli.Conn())
	return client.UserLogout(ctx, in, opts...)
}

// 创建分组
func (m *defaultUserService) GroupCreate(ctx context.Context, in *GroupSaveRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	client := __.NewUserServiceClient(m.cli.Conn())
	return client.GroupCreate(ctx, in, opts...)
}

// 获取分组列表
func (m *defaultUserService) GroupList(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (__.UserService_GroupListClient, error) {
	client := __.NewUserServiceClient(m.cli.Conn())
	return client.GroupList(ctx, in, opts...)
}

// 更新分组
func (m *defaultUserService) GroupUpdate(ctx context.Context, in *GroupUpdateRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	client := __.NewUserServiceClient(m.cli.Conn())
	return client.GroupUpdate(ctx, in, opts...)
}

// 删除分组
func (m *defaultUserService) GroupDelete(ctx context.Context, in *GroupDeleteRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	client := __.NewUserServiceClient(m.cli.Conn())
	return client.GroupDelete(ctx, in, opts...)
}

// 分组排序
func (m *defaultUserService) GroupSort(ctx context.Context, opts ...grpc.CallOption) (__.UserService_GroupSortClient, error) {
	client := __.NewUserServiceClient(m.cli.Conn())
	return client.GroupSort(ctx, opts...)
}

// 分页查询回收站短链接
func (m *defaultUserService) RecycleBinPage(ctx context.Context, in *RecycleBinPageRequest, opts ...grpc.CallOption) (*RecycleBinPageResponse, error) {
	client := __.NewUserServiceClient(m.cli.Conn())
	return client.RecycleBinPage(ctx, in, opts...)
}
